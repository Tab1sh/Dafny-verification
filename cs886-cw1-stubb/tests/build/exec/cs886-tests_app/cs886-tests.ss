#!/usr/local/bin/chez --program

;; @generated by Idris 0.7.0, Chez backend
(import (chezscheme))
(case (machine-type)
  [(i3fb ti3fb a6fb ta6fb) #f]
  [(i3le ti3le a6le ta6le tarm64le) (load-shared-object "libc.so.6")]
  [(i3osx ti3osx a6osx ta6osx tarm64osx) (load-shared-object "libc.dylib")]
  [(i3nt ti3nt a6nt ta6nt) (load-shared-object "msvcrt.dll")]
  [else (load-shared-object "libc.so")])

(load-shared-object "libidris2_support.so")

(let ()
(define (blodwen-os)
  (case (machine-type)
    [(i3le ti3le a6le ta6le tarm64le) "unix"]  ; GNU/Linux
    [(i3ob ti3ob a6ob ta6ob tarm64ob) "unix"]  ; OpenBSD
    [(i3fb ti3fb a6fb ta6fb tarm64fb) "unix"]  ; FreeBSD
    [(i3nb ti3nb a6nb ta6nb tarm64nb) "unix"]  ; NetBSD
    [(i3osx ti3osx a6osx ta6osx tarm64osx) "darwin"]
    [(i3nt ti3nt a6nt ta6nt tarm64nt) "windows"]
    [else "unknown"]))

(define blodwen-lazy
  (lambda (f)
    (let ([evaluated #f] [res void])
      (lambda ()
        (if (not evaluated)
            (begin (set! evaluated #t)
                   (set! res (f))
                   (set! f void))
            (void))
        res))))

(define (blodwen-toSignedInt x bits)
  (if (logbit? bits x)
      (logor x (ash -1 bits))
      (logand x (sub1 (ash 1 bits)))))

(define (blodwen-toUnsignedInt x bits)
  (logand x (sub1 (ash 1 bits))))

(define (blodwen-euclidDiv a b)
  (let ((q (quotient a b))
        (r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (- q 1) (+ q 1))
      q)))

(define (blodwen-euclidMod a b)
  (let ((r (remainder a b)))
    (if (< r 0)
      (if (> b 0) (+ r b) (- r b))
      r)))

; flonum constants

(define (blodwen-calcFlonumUnitRoundoff)
  (let loop [(uro 1.0)]
    (if (fl= 1.0 (fl+ 1.0 uro))
      uro
      (loop (fl/ uro 2.0)))))

(define (blodwen-calcFlonumEpsilon)
  (fl* (blodwen-calcFlonumUnitRoundoff) 2.0))

(define (blodwen-flonumNaN)
  +nan.0)

(define (blodwen-flonumInf)
  +inf.0)

; Bits

(define bu+ (lambda (x y bits) (blodwen-toUnsignedInt (+ x y) bits)))
(define bu- (lambda (x y bits) (blodwen-toUnsignedInt (- x y) bits)))
(define bu* (lambda (x y bits) (blodwen-toUnsignedInt (* x y) bits)))
(define bu/ (lambda (x y bits) (blodwen-toUnsignedInt (quotient x y) bits)))

(define bs+ (lambda (x y bits) (blodwen-toSignedInt (+ x y) bits)))
(define bs- (lambda (x y bits) (blodwen-toSignedInt (- x y) bits)))
(define bs* (lambda (x y bits) (blodwen-toSignedInt (* x y) bits)))
(define bs/ (lambda (x y bits) (blodwen-toSignedInt (blodwen-euclidDiv x y) bits)))

(define (integer->bits8 x) (logand x (sub1 (ash 1 8))))
(define (integer->bits16 x) (logand x (sub1 (ash 1 16))))
(define (integer->bits32 x) (logand x (sub1 (ash 1 32))))
(define (integer->bits64 x) (logand x (sub1 (ash 1 64))))

(define (bits16->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits64->bits8 x) (logand x (sub1 (ash 1 8))))
(define (bits32->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits16 x) (logand x (sub1 (ash 1 16))))
(define (bits64->bits32 x) (logand x (sub1 (ash 1 32))))

(define (blodwen-bits-shl-signed x y bits) (blodwen-toSignedInt (ash x y) bits))

(define (blodwen-bits-shl x y bits) (logand (ash x y) (sub1 (ash 1 bits))))

(define blodwen-shl (lambda (x y) (ash x y)))
(define blodwen-shr (lambda (x y) (ash x (- y))))
(define blodwen-and (lambda (x y) (logand x y)))
(define blodwen-or (lambda (x y) (logor x y)))
(define blodwen-xor (lambda (x y) (logxor x y)))

(define cast-num
  (lambda (x)
    (if (number? x) x 0)))
(define destroy-prefix
  (lambda (x)
    (cond
      ((equal? x "") "")
      ((equal? (string-ref x 0) #\#) "")
      (else x))))

(define exact-floor
  (lambda (x)
    (inexact->exact (floor x))))

(define exact-truncate
  (lambda (x)
    (inexact->exact (truncate x))))

(define exact-truncate-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (exact-truncate x) y)))

(define exact-truncate-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (exact-truncate x) y)))

(define cast-char-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (char->integer x) y)))

(define cast-char-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (char->integer x) y)))

(define cast-string-int
  (lambda (x)
    (exact-truncate (cast-num (string->number (destroy-prefix x))))))

(define cast-string-boundedInt
  (lambda (x y)
    (blodwen-toSignedInt (cast-string-int x) y)))

(define cast-string-boundedUInt
  (lambda (x y)
    (blodwen-toUnsignedInt (cast-string-int x) y)))

(define cast-int-char
  (lambda (x)
    (if (or
          (and (>= x 0) (<= x #xd7ff))
          (and (>= x #xe000) (<= x #x10ffff)))
        (integer->char x)
        (integer->char 0))))

(define cast-string-double
  (lambda (x)
    (exact->inexact (cast-num (string->number (destroy-prefix x))))))


(define (string-concat xs) (apply string-append xs))
(define (string-unpack s) (string->list s))
(define (string-pack xs) (list->string xs))

(define string-cons (lambda (x y) (string-append (string x) y)))
(define string-reverse (lambda (x)
  (list->string (reverse (string->list x)))))
(define (string-substr off len s)
    (let* ((l (string-length s))
          (b (max 0 off))
          (x (max 0 len))
          (end (min l (+ b x))))
          (if (> b l)
              ""
              (substring s b end))))

(define (blodwen-string-iterator-new s)
  0)

(define (blodwen-string-iterator-to-string _ s ofs f)
  (f (substring s ofs (string-length s))))

(define (blodwen-string-iterator-next s ofs)
  (if (>= ofs (string-length s))
      '() ; EOF
      (cons (string-ref s ofs) (+ ofs 1))))

(define either-left
  (lambda (x)
    (vector 0 x)))

(define either-right
  (lambda (x)
    (vector 1 x)))

(define blodwen-error-quit
  (lambda (msg)
    (display msg)
    (newline)
    (exit 1)))

(define (blodwen-get-line p)
    (if (port? p)
        (let ((str (get-line p)))
            (if (eof-object? str)
                ""
                str))
        void))

(define (blodwen-get-char p)
    (if (port? p)
        (let ((chr (get-char p)))
            (if (eof-object? chr)
                #\nul
                chr))
        void))

;; Buffers

(define (blodwen-new-buffer size)
  (make-bytevector size 0))

(define (blodwen-buffer-size buf)
  (bytevector-length buf))

(define (blodwen-buffer-setbyte buf loc val)
  (bytevector-u8-set! buf loc val))

(define (blodwen-buffer-getbyte buf loc)
  (bytevector-u8-ref buf loc))

(define (blodwen-buffer-setbits16 buf loc val)
  (bytevector-u16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits16 buf loc)
  (bytevector-u16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits32 buf loc val)
  (bytevector-u32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits32 buf loc)
  (bytevector-u32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setbits64 buf loc val)
  (bytevector-u64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getbits64 buf loc)
  (bytevector-u64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint8 buf loc val)
  (bytevector-s8-set! buf loc val))

(define (blodwen-buffer-getint8 buf loc)
  (bytevector-s8-ref buf loc))

(define (blodwen-buffer-setint16 buf loc val)
  (bytevector-s16-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint16 buf loc)
  (bytevector-s16-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint32 buf loc val)
  (bytevector-s32-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint32 buf loc)
  (bytevector-s32-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setint64 buf loc val)
  (bytevector-s64-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getint64 buf loc)
  (bytevector-s64-ref buf loc (native-endianness)))

(define (blodwen-buffer-setdouble buf loc val)
  (bytevector-ieee-double-set! buf loc val (native-endianness)))

(define (blodwen-buffer-getdouble buf loc)
  (bytevector-ieee-double-ref buf loc (native-endianness)))

(define (blodwen-stringbytelen str)
  (bytevector-length (string->utf8 str)))

(define (blodwen-buffer-setstring buf loc val)
  (let* [(strvec (string->utf8 val))
         (len (bytevector-length strvec))]
    (bytevector-copy! strvec 0 buf loc len)))

(define (blodwen-buffer-getstring buf loc len)
  (let [(newvec (make-bytevector len))]
    (bytevector-copy! buf loc newvec 0 len)
    (utf8->string newvec)))

(define (blodwen-buffer-copydata buf start len dest loc)
  (bytevector-copy! buf start dest loc len))

;; Threads

(define-record thread-handle (semaphore))

(define (blodwen-thread proc)
  (let [(sema (blodwen-make-semaphore 0))]
    (fork-thread (lambda () (proc (vector 0)) (blodwen-semaphore-post sema)))
    (make-thread-handle sema)
    ))

(define (blodwen-thread-wait handle)
  (blodwen-semaphore-wait (thread-handle-semaphore handle)))

;; Thread mailboxes

(define blodwen-thread-data
  (make-thread-parameter #f))

(define (blodwen-get-thread-data ty)
  (blodwen-thread-data))

(define (blodwen-set-thread-data ty a)
  (blodwen-thread-data a))

;; Semaphore

(define-record semaphore (box mutex condition))

(define (blodwen-make-semaphore init)
  (make-semaphore (box init) (make-mutex) (make-condition)))

(define (blodwen-semaphore-post sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (set-box! sema-box (+ (unbox sema-box) 1))
      (condition-signal (semaphore-condition sema))
    )))

(define (blodwen-semaphore-wait sema)
  (with-mutex (semaphore-mutex sema)
    (let [(sema-box (semaphore-box sema))]
      (when (= (unbox sema-box) 0)
        (condition-wait (semaphore-condition sema) (semaphore-mutex sema)))
      (set-box! sema-box (- (unbox sema-box) 1))
      )))

;; Barrier

(define-record barrier (count-box num-threads mutex cond))

(define (blodwen-make-barrier num-threads)
  (make-barrier (box 0) num-threads (make-mutex) (make-condition)))

(define (blodwen-barrier-wait barrier)
  (let [(count-box (barrier-count-box barrier))
        (num-threads (barrier-num-threads barrier))
        (mutex (barrier-mutex barrier))
        (condition (barrier-cond barrier))]
    (with-mutex mutex
    (let* [(count-old (unbox count-box))
           (count-new (+ count-old 1))]
      (set-box! count-box count-new)
      (if (= count-new num-threads)
          (condition-broadcast condition)
          (condition-wait condition mutex))
      ))))

;; Channel
; With thanks to Alain Zscheile (@zseri) for help with understanding condition
; variables, and figuring out where the problems were and how to solve them.

(define-record channel (read-mut read-cv read-box val-cv val-box))

(define (blodwen-make-channel ty)
  (make-channel
    (make-mutex)
    (make-condition)
    (box #t)
    (make-condition)
    (box '())
    ))

; block on the read status using read-cv until the value has been read
(define (channel-put-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [read-cv  (channel-read-cv  chan)]
        )
    (if (unbox read-box)
      (void)    ; val has been read, so everything is fine
      (begin    ; otherwise, block/spin with cv
        (condition-wait read-cv read-mut)
        (channel-put-while-helper chan)
        )
      )))

(define (blodwen-channel-put ty chan val)
  (with-mutex (channel-read-mut chan)
    (channel-put-while-helper chan)
    (let ([read-box (channel-read-box chan)]
          [val-box  (channel-val-box  chan)]
          )
      (set-box! val-box val)
      (set-box! read-box #f)
      ))
  (condition-signal (channel-val-cv chan))
  )

; block on the value until it has been set
(define (channel-get-while-helper chan)
  (let ([read-mut (channel-read-mut chan)]
        [read-box (channel-read-box chan)]
        [val-cv   (channel-val-cv   chan)]
        )
    (if (unbox read-box)
      (begin
        (condition-wait val-cv read-mut)
        (channel-get-while-helper chan)
        )
      (void)
      )))

(define (blodwen-channel-get ty chan)
  (mutex-acquire (channel-read-mut chan))
  (channel-get-while-helper chan)
  (let* ([val-box  (channel-val-box  chan)]
         [read-box (channel-read-box chan)]
         [read-cv  (channel-read-cv  chan)]
         [the-val  (unbox val-box)]
         )
    (set-box! val-box '())
    (set-box! read-box #t)
    (mutex-release (channel-read-mut chan))
    (condition-signal read-cv)
    the-val))

;; Mutex

(define (blodwen-make-mutex)
  (make-mutex))
(define (blodwen-mutex-acquire mutex)
  (mutex-acquire mutex))
(define (blodwen-mutex-release mutex)
  (mutex-release mutex))

;; Condition variable

(define (blodwen-make-condition)
  (make-condition))
(define (blodwen-condition-wait condition mutex)
  (condition-wait condition mutex))
(define (blodwen-condition-wait-timeout condition mutex timeout)
  (let* [(sec (div timeout 1000000))
         (micro (mod timeout 1000000))]
    (condition-wait condition mutex (make-time 'time-duration (* 1000 micro) sec))))
(define (blodwen-condition-signal condition)
  (condition-signal condition))
(define (blodwen-condition-broadcast condition)
  (condition-broadcast condition))

;; Future

(define-record future-internal (result ready mutex signal))
(define (blodwen-make-future work)
  (let ([future (make-future-internal #f #f (make-mutex) (make-condition))])
    (fork-thread (lambda ()
      (let ([result (work)])
        (with-mutex (future-internal-mutex future)
          (set-future-internal-result! future result)
          (set-future-internal-ready! future #t)
          (condition-broadcast (future-internal-signal future))))))
    future))
(define (blodwen-await-future ty future)
  (let ([mutex (future-internal-mutex future)])
    (with-mutex mutex
      (if (not (future-internal-ready future))
          (condition-wait (future-internal-signal future) mutex))
      (future-internal-result future))))

(define (blodwen-sleep s) (sleep (make-time 'time-duration 0 s)))
(define (blodwen-usleep s)
  (let ((sec (div s 1000000))
        (micro (mod s 1000000)))
       (sleep (make-time 'time-duration (* 1000 micro) sec))))

(define (blodwen-clock-time-utc) (current-time 'time-utc))
(define (blodwen-clock-time-monotonic) (current-time 'time-monotonic))
(define (blodwen-clock-time-duration) (current-time 'time-duration))
(define (blodwen-clock-time-process) (current-time 'time-process))
(define (blodwen-clock-time-thread) (current-time 'time-thread))
(define (blodwen-clock-time-gccpu) (current-time 'time-collector-cpu))
(define (blodwen-clock-time-gcreal) (current-time 'time-collector-real))
(define (blodwen-is-time? clk) (if (time? clk) 1 0))
(define (blodwen-clock-second time) (time-second time))
(define (blodwen-clock-nanosecond time) (time-nanosecond time))


(define (blodwen-arg-count)
  (length (command-line)))

(define (blodwen-arg n)
  (if (< n (length (command-line))) (list-ref (command-line) n) ""))

(define (blodwen-hasenv var)
  (if (eq? (getenv var) #f) 0 1))

;; Randoms
(define random-seed-register 0)
(define (initialize-random-seed-once)
  (if (= (virtual-register random-seed-register) 0)
      (let ([seed (time-nanosecond (current-time))])
        (set-virtual-register! random-seed-register seed)
        (random-seed seed))))

(define (blodwen-random-seed seed)
  (set-virtual-register! random-seed-register seed)
  (random-seed seed))
(define blodwen-random
  (case-lambda
    ;; no argument, pick a real value from [0, 1.0)
    [() (begin
          (initialize-random-seed-once)
          (random 1.0))]
    ;; single argument k, pick an integral value from [0, k)
    [(k)
      (begin
        (initialize-random-seed-once)
        (if (> k 0)
              (random k)
              (assertion-violationf 'blodwen-random "invalid range argument ~a" k)))]))

;; For finalisers

(define blodwen-finaliser (make-guardian))
(define (blodwen-register-object obj proc)
  (let [(x (cons obj proc))]
       (blodwen-finaliser x)
       x))
(define blodwen-run-finalisers
  (lambda ()
    (let run ()
      (let ([x (blodwen-finaliser)])
        (when x
          (((cdr x) (car x)) 'erased)
          (run))))))

;; For creating and reading back scheme objects

; read a scheme string and evaluate it, returning 'Just result' on success
; TODO: catch exception!
(define (blodwen-eval-scheme str)
  (guard
     (x [#t '()]) ; Nothing on failure
     (box (eval (read (open-input-string str)))))
  ); box == Just

(define (blodwen-eval-okay obj)
  (if (null? obj)
      0
      1))

(define (blodwen-get-eval-result obj)
  (unbox obj))

(define (blodwen-debug-scheme obj)
  (display obj) (newline))

(define (blodwen-is-number obj)
  (if (number? obj) 1 0))

(define (blodwen-is-integer obj)
  (if (and (number? obj) (exact? obj)) 1 0))

(define (blodwen-is-float obj)
  (if (flonum? obj) 1 0))

(define (blodwen-is-char obj)
  (if (char? obj) 1 0))

(define (blodwen-is-string obj)
  (if (string? obj) 1 0))

(define (blodwen-is-procedure obj)
  (if (procedure? obj) 1 0))

(define (blodwen-is-symbol obj)
  (if (symbol? obj) 1 0))

(define (blodwen-is-vector obj)
  (if (vector? obj) 1 0))

(define (blodwen-is-nil obj)
  (if (null? obj) 1 0))

(define (blodwen-is-pair obj)
  (if (pair? obj) 1 0))

(define (blodwen-is-box obj)
  (if (box? obj) 1 0))

(define (blodwen-make-symbol str)
  (string->symbol str))

; The below rely on checking that the objects are the right type first.

(define (blodwen-vector-ref obj i)
  (vector-ref obj i))

(define (blodwen-vector-length obj)
  (vector-length obj))

(define (blodwen-vector-list obj)
  (vector->list obj))

(define (blodwen-unbox obj)
  (unbox obj))

(define (blodwen-apply obj arg)
  (obj arg))

(define (blodwen-force obj)
  (obj))

(define (blodwen-read-symbol sym)
  (symbol->string sym))

(define (blodwen-id x) x)
(define SystemC-45Concurrency-prim__makeChannel (lambda (farg-0 farg-1) (blodwen-make-channel farg-0)))
(define SystemC-45Concurrency-prim__channelPut (lambda (farg-0 farg-1 farg-2 farg-3) (blodwen-channel-put farg-0 farg-1 farg-2)))
(define SystemC-45Concurrency-prim__channelGet (lambda (farg-0 farg-1 farg-2) (blodwen-channel-get farg-0 farg-1)))
(define PreludeC-45Types-fastUnpack (lambda (farg-0) (string-unpack farg-0)))
(define PreludeC-45Types-fastPack (lambda (farg-0) (string-pack farg-0)))
(define PreludeC-45Types-fastConcat (lambda (farg-0) (string-concat farg-0)))
(define PreludeC-45IO-prim__putStr (lambda (farg-0 farg-1) ((foreign-procedure "idris2_putStr" (string) void) farg-0)))
(define PreludeC-45IO-prim__getString (lambda (farg-0) ((foreign-procedure "idris2_getString" (void*) string) farg-0)))
(define PreludeC-45IO-prim__getStr (lambda (farg-0) ((foreign-procedure "idris2_getStr" () string) )))
(define PreludeC-45IO-prim__fork (lambda (farg-0 farg-1) (blodwen-thread farg-0)))
(define PrimIO-prim__nullAnyPtr (lambda (farg-0) ((foreign-procedure "idris2_isNull" (void*) int) farg-0)))
(define SystemC-45FileC-45Virtual-prim__stdout (lambda () ((foreign-procedure "idris2_stdout" () void*) )))
(define SystemC-45FileC-45Virtual-prim__stderr (lambda () ((foreign-procedure "idris2_stderr" () void*) )))
(define SystemC-45FileC-45ReadWrite-prim__writeLine (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_writeLine" (void* string) int) farg-0 farg-1)))
(define SystemC-45FileC-45ReadWrite-prim__seekLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_seekLine" (void*) int) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__readLine (lambda (farg-0 farg-1) ((foreign-procedure "idris2_readLine" (void*) void*) farg-0)))
(define SystemC-45FileC-45ReadWrite-prim__eof (lambda (farg-0 farg-1) ((foreign-procedure "idris2_eof" (void*) int) farg-0)))
(define SystemC-45FFI-prim__free (lambda (farg-0 farg-1) ((foreign-procedure "idris2_free" (void*) void) farg-0)))
(define SystemC-45FileC-45Error-prim__fileErrno (lambda (farg-0) ((foreign-procedure "idris2_fileErrno" () int) )))
(define SystemC-45FileC-45Error-prim__error (lambda (farg-0 farg-1) ((foreign-procedure "idris2_fileError" (void*) int) farg-0)))
(define SystemC-45Errno-prim__strerror (lambda (farg-0 farg-1) ((foreign-procedure "idris2_strerror" (int) string) farg-0)))
(define SystemC-45Errno-prim__getErrno (lambda (farg-0) ((foreign-procedure "idris2_getErrno" () int) )))
(define SystemC-45FileC-45Handle-prim__open (lambda (farg-0 farg-1 farg-2) ((foreign-procedure "idris2_openFile" (string string) void*) farg-0 farg-1)))
(define SystemC-45FileC-45Handle-prim__close (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeFile" (void*) void) farg-0)))
(define SystemC-45FileC-45Meta-prim__fileIsTTY (lambda (farg-0 farg-1) ((foreign-procedure "idris2_fileIsTTY" (void*) int) farg-0)))
(define SystemC-45Directory-prim__openDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_openDir" (string) void*) farg-0)))
(define SystemC-45Directory-prim__dirEntry (lambda (farg-0 farg-1) ((foreign-procedure "idris2_nextDirEntry" (void*) void*) farg-0)))
(define SystemC-45Directory-prim__closeDir (lambda (farg-0 farg-1) ((foreign-procedure "idris2_closeDir" (void*) void) farg-0)))
(define SystemC-45Clock-prim__osClockValid (lambda (farg-0 farg-1) (blodwen-is-time? farg-0)))
(define SystemC-45Clock-prim__osClockSecond (lambda (farg-0 farg-1) (blodwen-clock-second farg-0)))
(define SystemC-45Clock-prim__osClockNanosecond (lambda (farg-0 farg-1) (blodwen-clock-nanosecond farg-0)))
(define SystemC-45Clock-prim__clockTimeUtc (lambda (farg-0) (blodwen-clock-time-utc )))
(define SystemC-45Clock-prim__clockTimeThread (lambda (farg-0) (blodwen-clock-time-thread )))
(define SystemC-45Clock-prim__clockTimeProcess (lambda (farg-0) (blodwen-clock-time-process )))
(define SystemC-45Clock-prim__clockTimeMonotonic (lambda (farg-0) (blodwen-clock-time-monotonic )))
(define SystemC-45Clock-prim__clockTimeGcReal (lambda (farg-0) (blodwen-clock-time-gcreal )))
(define SystemC-45Clock-prim__clockTimeGcCpu (lambda (farg-0) (blodwen-clock-time-gccpu )))
(define System-prim__system (lambda (farg-0 farg-1) ((foreign-procedure "idris2_system" (string) int) farg-0)))
(define System-prim__getEnv (lambda (farg-0 farg-1) ((foreign-procedure "getenv" (string) void*) farg-0)))
(define System-prim__getArgCount (lambda (farg-0) (blodwen-arg-count )))
(define System-prim__getArg (lambda (farg-0 farg-1) (blodwen-arg farg-0)))
(define System-prim__exit (lambda (farg-0 farg-1) ((foreign-procedure "exit" (int) void) farg-0)))
(define PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-1 (unbox arg-2))) (if (null? arg-3) '() (let ((e-3 (unbox arg-3))) (box (e-1 e-3))))))))
(define PreludeC-45Types-u--map_Functor_Maybe (lambda (arg-2 arg-3) (if (null? arg-3) '() (let ((e-1 (unbox arg-3))) (box (arg-2 e-1))))))
(define csegen-6 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (PreludeC-45Types-u--map_Functor_Maybe u--func arg-8885))))) (lambda (u--a) (lambda (arg-9931) (box arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (PreludeC-45Types-u--C-60C-42C-62_Applicative_Maybe arg-9937 arg-9944)))))))
(define PreludeC-45TypesC-45SnocList-C-60C-62C-62 (lambda (arg-1 arg-2) (if (null? arg-1) arg-2 (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 e-2 (cons e-3 arg-2)))))))
(define PreludeC-45TypesC-45List-mapAppend (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-2 '()) (let ((e-1 (car arg-4))) (let ((e-2 (cdr arg-4))) (PreludeC-45TypesC-45List-mapAppend (cons arg-2 (arg-3 e-1)) arg-3 e-2))))))
(define csegen-9 (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (PreludeC-45TypesC-45List-mapAppend '() u--func arg-8885))))))
(define PreludeC-45Types-u--foldl_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-u--foldl_Foldable_List arg-2 ((arg-2 arg-3) e-2) e-3))))))
(define PreludeC-45Types-u--foldMap_Foldable_List (lambda (arg-2 arg-3 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--acc) (lambda (u--elem) (let ((e-1 (car arg-2))) ((e-1 u--acc) (arg-3 u--elem))))) (let ((e-2 (cdr arg-2))) e-2) ext-0)))
(define PreludeC-45Basics-flip (lambda (arg-3 ext-0 ext-1) ((arg-3 ext-1) ext-0)))
(define PreludeC-45Types-u--foldlM_Foldable_List (lambda (arg-3 arg-4 arg-5 ext-0) (PreludeC-45Types-u--foldl_Foldable_List (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-3 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-4 u--b eta-0)))))) (let ((e-1 (vector-ref arg-3 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-5))) ext-0)))
(define PreludeC-45Types-u--foldr_Foldable_List (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) ((arg-2 e-2) (PreludeC-45Types-u--foldr_Foldable_List arg-2 arg-3 e-3)))))))
(define PreludeC-45Types-u--null_Foldable_List (lambda (arg-1) (if (null? arg-1) 1 0)))
(define csegen-24 (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_List u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10911) (PreludeC-45Types-u--null_Foldable_List arg-10911))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_List i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10940) arg-10940)) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10954) (PreludeC-45Types-u--foldMap_Foldable_List i_con-0 u--f arg-10954))))))))
(define PreludeC-45IO-u--map_Functor_IO (lambda (arg-2 arg-3 ext-0) (let ((act-2 (arg-3 ext-0))) (arg-2 act-2))))
(define csegen-36 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (lambda (eta-0) (PreludeC-45IO-u--map_Functor_IO u--func arg-8885 eta-0)))))) (lambda (u--a) (lambda (arg-9931) (lambda (eta-0) arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (lambda (world-4) (let ((act-5 (arg-9937 world-4))) (let ((act-3 (arg-9944 world-4))) (act-5 act-3))))))))))
(define csegen-42 (vector csegen-36 (lambda (u--b) (lambda (u--a) (lambda (arg-10411) (lambda (arg-10414) (lambda (world-0) (let ((act-1 (arg-10411 world-0))) ((arg-10414 act-1) world-0))))))) (lambda (u--a) (lambda (arg-10425) (lambda (world-0) (let ((act-1 (arg-10425 world-0))) (act-1 world-0)))))))
(define csegen-43 (cons csegen-42 (lambda (u--a) (lambda (arg-13095) arg-13095))))
(define SystemC-45Concurrency-makeChannel (lambda (arg-2) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Concurrency-prim__makeChannel 'erased eta-0))))))
(define csegen-44 (SystemC-45Concurrency-makeChannel csegen-43))
(define csegen-57 (cons (lambda (arg-8474) (lambda (arg-8477) (string-append arg-8474 arg-8477))) ""))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) 1) (else arg-1))))
(define csegen-105 (cons (lambda (arg-8474) (lambda (arg-8477) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AnyBool arg-8474 arg-8477))) 0))
(define PreludeC-45Types-elemBy (lambda (arg-2 arg-3 arg-4 ext-0) (let ((e-6 (vector-ref arg-2 5))) (((((e-6 'erased) 'erased) csegen-105) (arg-3 arg-4)) ext-0))))
(define PreludeC-45Types-elem (lambda (arg-2 arg-3 ext-1 ext-0) (PreludeC-45Types-elemBy arg-2 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 eta-0) eta-1)))) ext-1 ext-0)))
(define SystemC-45Info-os (blodwen-os))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (or (and (string=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_String (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-66 (cons (lambda (arg-676) (lambda (arg-679) (PreludeC-45EqOrd-u--C-61C-61_Eq_String arg-676 arg-679))) (lambda (arg-686) (lambda (arg-689) (PreludeC-45EqOrd-u--C-47C-61_Eq_String arg-686 arg-689)))))
(define SystemC-45Info-isWindows (PreludeC-45Types-elem csegen-24 csegen-66 SystemC-45Info-os (cons "windows" (cons "mingw32" (cons "cygwin32" '())))))
(define csegen-58 (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) 0) (else 1))))
(define PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe (lambda (arg-1 arg-2) (if (null? arg-1) (arg-2) (let ((e-1 (unbox arg-1))) (box e-1)))))
(define csegen-63 (vector csegen-6 (lambda (u--a) '()) (lambda (u--a) (lambda (arg-10313) (lambda (arg-10316) (PreludeC-45Types-u--C-60C-124C-62_Alternative_Maybe arg-10313 arg-10316))))))
(define csegen-67 (cons "--only" (cons "--except" '())))
(define PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool (lambda (arg-0 arg-1) (cond ((equal? arg-0 1) arg-1) (else 0))))
(define csegen-107 (cons (lambda (arg-8474) (lambda (arg-8477) (PreludeC-45InterfacesC-45BoolC-45Semigroup-u--C-60C-43C-62_Semigroup_AllBool arg-8474 arg-8477))) 1))
(define csegen-111 (lambda (eta-0) (lambda (eta-1) (cons eta-0 eta-1))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Char (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define csegen-154 (cons (lambda (arg-676) (lambda (arg-679) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-676 arg-679))) (lambda (arg-686) (lambda (arg-689) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char arg-686 arg-689)))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4) (case (vector-ref arg-3 0) ((0) (let ((e-2 (vector-ref arg-3 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-3 1))) (arg-4 e-5))))))
(define csegen-157 (lambda (u--b) (lambda (u--a) (lambda (arg-10411) (lambda (arg-10414) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-10411 arg-10414))))))
(define PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 (lambda (arg-2) (PreludeC-45Types-u--C-62C-62C-61_Monad_C-40EitherC-32C-36eC-41 arg-2 (lambda (eta-0) eta-0))))
(define csegen-158 (lambda (u--a) (lambda (arg-10425) (PreludeC-45Types-u--join_Monad_C-40EitherC-32C-36eC-41 arg-10425))))
(define PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) (case (vector-ref arg-5 0) ((0) arg-4) (else (let ((e-5 (vector-ref arg-5 1))) ((arg-3 e-5) arg-4))))))
(define PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-3))) ((e-1 (arg-4 eta-0)) eta-1)))) (let ((e-2 (cdr arg-3))) e-2) ext-0)))
(define PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-3 arg-4 arg-5) ((PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 (lambda (eta-0) (lambda (eta-1) (PreludeC-45Basics-flip (lambda (eta-2) (lambda (eta-3) (lambda (eta-4) (eta-2 (eta-3 eta-4))))) (lambda (eta-2) (PreludeC-45Basics-flip arg-3 eta-0 eta-2)) eta-1))) (lambda (eta-0) eta-0) arg-5) arg-4)))
(define PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6 ext-0) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 (lambda (u--ma) (lambda (u--b) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) u--ma) (lambda (eta-0) (PreludeC-45Basics-flip arg-5 u--b eta-0)))))) (let ((e-1 (vector-ref arg-4 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) arg-6))) ext-0)))
(define PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 (lambda (arg-2) (case (vector-ref arg-2 0) ((0) 1) (else 0))))
(define PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 (lambda (ext-0) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 csegen-111 '() ext-0)))
(define csegen-174 (vector (lambda (u--acc) (lambda (u--elem) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldr_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (u--acc) (lambda (u--func) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldl_Foldable_C-40EitherC-32C-36eC-41 u--func u--init u--input)))))) (lambda (u--elem) (lambda (arg-10911) (PreludeC-45Types-u--null_Foldable_C-40EitherC-32C-36eC-41 arg-10911))) (lambda (u--elem) (lambda (u--acc) (lambda (u--m) (lambda (i_con-0) (lambda (u--funcM) (lambda (u--init) (lambda (u--input) (PreludeC-45Types-u--foldlM_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--funcM u--init u--input)))))))) (lambda (u--elem) (lambda (arg-10940) (PreludeC-45Types-u--toList_Foldable_C-40EitherC-32C-36eC-41 arg-10940))) (lambda (u--a) (lambda (u--m) (lambda (i_con-0) (lambda (u--f) (lambda (arg-10954) (PreludeC-45Types-u--foldMap_Foldable_C-40EitherC-32C-36eC-41 i_con-0 u--f arg-10954))))))))
(define PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 (lambda (arg-4 arg-5 arg-6) (case (vector-ref arg-6 0) ((0) (let ((e-2 (vector-ref arg-6 1))) (let ((e-4 (vector-ref arg-4 1))) ((e-4 'erased) (vector 0 e-2))))) (else (let ((e-5 (vector-ref arg-6 1))) (let ((e-1 (vector-ref arg-4 0))) ((((e-1 'erased) 'erased) (lambda (eta-0) (vector 1 eta-0))) (arg-5 e-5))))))))
(define csegen-178 (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-14093) (lambda (arg-14100) (PreludeC-45Types-u--traverse_Traversable_C-40EitherC-32C-36eC-41 i_con-0 arg-14093 arg-14100))))))))
(define csegen-190 (vector (lambda (arg-5904) (lambda (arg-5907) (bs+ arg-5904 arg-5907 63))) (lambda (arg-5914) (lambda (arg-5917) (bs* arg-5914 arg-5917 63))) (lambda (arg-5924) (blodwen-toSignedInt arg-5924 63))))
(define u--prim__sub_Integer (lambda (arg-0 arg-1) (- arg-0 arg-1)))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (<= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-60_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (>= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (or (and (> arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--compare_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45Num-u--div_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (bs/ arg-0 arg-1 63))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in div at Prelude.Num:128:3--130:40")))))))
(define PreludeC-45EqOrd-u--max_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-62_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45EqOrd-u--min_Ord_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-0 arg-1))) (cond ((equal? sc0 1) arg-0) (else arg-1)))))
(define PreludeC-45Num-u--mod_Integral_Int (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-1 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 0) (blodwen-euclidMod arg-0 arg-1))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in mod at Prelude.Num:131:3--133:40")))))))
(define PreludeC-45Types-countFrom (lambda (arg-1 arg-2) (cons arg-1 (lambda () (PreludeC-45Types-countFrom (arg-2 arg-1) arg-2)))))
(define Builtin-fst (lambda (arg-2) (let ((e-2 (car arg-2))) e-2)))
(define Builtin-snd (lambda (arg-2) (let ((e-3 (cdr arg-2))) e-3)))
(define PreludeC-45Types-takeUntil (lambda (arg-1 arg-2) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((sc1 (arg-1 e-1))) (cond ((equal? sc1 1) (cons e-1 '())) (else (cons e-1 (PreludeC-45Types-takeUntil arg-1 (e-2))))))))))
(define PreludeC-45Types-u--pure_Applicative_List (lambda (arg-1) (cons arg-1 '())))
(define PreludeC-45Types-u--rangeFromTo_Range_C-36a (lambda (arg-1 arg-2 arg-3) (let ((sc0 (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-2 (vector-ref sc1 1))) ((e-2 arg-2) arg-3))))) (cond ((equal? sc0 0) (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 5))) ((e-6 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-1 (vector-ref sc1 0))) (let ((e-6 (vector-ref e-1 0))) ((e-6 arg-0) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-9 (vector-ref sc1 0))) (let ((e-10 (vector-ref e-9 2))) (e-10 1)))))))))))) ((equal? sc0 1) (PreludeC-45Types-u--pure_Applicative_List arg-2)) (else (PreludeC-45Types-takeUntil (lambda (arg-0) (let ((sc1 (Builtin-fst (Builtin-snd arg-1)))) (let ((e-5 (vector-ref sc1 4))) ((e-5 arg-0) arg-3)))) (PreludeC-45Types-countFrom arg-2 (lambda (u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-3 (vector-ref sc1 2))) ((e-3 u--x) (let ((sc1 (Builtin-snd (Builtin-snd arg-1)))) (let ((e-6 (vector-ref sc1 0))) (let ((e-7 (vector-ref e-6 2))) (e-7 1)))))))))))))))
(define PreludeC-45Types-u--traverse_Traversable_List (lambda (arg-3 arg-4 arg-5) (if (null? arg-5) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) '())) (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((e-4 (vector-ref arg-3 2))) ((((e-4 'erased) 'erased) (let ((e-6 (vector-ref arg-3 2))) ((((e-6 'erased) 'erased) (let ((e-10 (vector-ref arg-3 1))) ((e-10 'erased) csegen-111))) (arg-4 e-2)))) (PreludeC-45Types-u--traverse_Traversable_List arg-3 arg-4 e-3))))))))
(define System-getArgs (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getArgCount eta-0))))) (lambda (u--n) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Int u--n (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (PreludeC-45Basics-flip (lambda (clam-0) (lambda (clam-1) (PreludeC-45Types-u--traverse_Traversable_List (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) clam-0 clam-1))) (PreludeC-45Types-u--rangeFromTo_Range_C-36a (cons (vector csegen-190 (lambda (arg-6312) (lambda (arg-6315) (PreludeC-45Num-u--div_Integral_Int arg-6312 arg-6315))) (lambda (arg-6322) (lambda (arg-6325) (PreludeC-45Num-u--mod_Integral_Int arg-6322 arg-6325)))) (cons (vector (cons (lambda (arg-676) (lambda (arg-679) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-676 arg-679))) (lambda (arg-686) (lambda (arg-689) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-686 arg-689)))) (lambda (arg-1566) (lambda (arg-1569) (PreludeC-45EqOrd-u--compare_Ord_Int arg-1566 arg-1569))) (lambda (arg-1576) (lambda (arg-1579) (PreludeC-45EqOrd-u--C-60_Ord_Int arg-1576 arg-1579))) (lambda (arg-1586) (lambda (arg-1589) (PreludeC-45EqOrd-u--C-62_Ord_Int arg-1586 arg-1589))) (lambda (arg-1596) (lambda (arg-1599) (PreludeC-45EqOrd-u--C-60C-61_Ord_Int arg-1596 arg-1599))) (lambda (arg-1606) (lambda (arg-1609) (PreludeC-45EqOrd-u--C-62C-61_Ord_Int arg-1606 arg-1609))) (lambda (arg-1616) (lambda (arg-1619) (PreludeC-45EqOrd-u--max_Ord_Int arg-1616 arg-1619))) (lambda (arg-1626) (lambda (arg-1629) (PreludeC-45EqOrd-u--min_Ord_Int arg-1626 arg-1629)))) (vector csegen-190 (lambda (arg-6023) (bs- 0 arg-6023 63)) (lambda (arg-6029) (lambda (arg-6032) (bs- arg-6029 arg-6032 63)))))) 0 (bs- u--n 1 63)) (lambda (eta-0) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-1) (System-prim__getArg eta-0 eta-1))))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '())))))))))))))
(define System-getEnv (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (System-prim__getEnv arg-2 eta-0))))) (lambda (u--env) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--env) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) '()))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (box (PreludeC-45IO-prim__getString u--env)))))))))))))))
(define TestC-45Golden-initAcc (vector '() '() '()))
(define TestC-45Golden-initOptions (lambda (arg-0 arg-1) (vector arg-0 '() '() 0 arg-1 0 1 '())))
(define DataC-45Maybe-isNothing (lambda (arg-1) (if (null? arg-1) 1 0)))
(define SystemC-45FileC-45Meta-isTTY (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (arg-0) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int arg-0 (blodwen-toSignedInt 0 63)))) (let ((e-9 (cdr arg-1))) ((e-9 'erased) (lambda (eta-0) (SystemC-45FileC-45Meta-prim__fileIsTTY arg-2 eta-0))))))))))
(define SystemC-45FileC-45Virtual-stdout (SystemC-45FileC-45Virtual-prim__stdout))
(define PreludeC-45Interfaces-guard (lambda (arg-1 arg-2) (cond ((equal? arg-2 1) (let ((e-1 (vector-ref arg-1 0))) (let ((e-5 (vector-ref e-1 1))) ((e-5 'erased) (vector 0 ))))) (else (let ((e-2 (vector-ref arg-1 1))) (e-2 'erased))))))
(define DataC-45String-strM (lambda (arg-0) (cond ((equal? arg-0 "") '())(else (cons (string-ref arg-0 0) (substring arg-0 1 (string-length arg-0)))))))
(define DataC-45String-with--asList-9518 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (if (null? arg-1) (vector 0 ) (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))(else (let ((e-0 (car arg-1))) (let ((e-1 (cdr arg-1))) (vector 1 e-0 e-1 (lambda () (DataC-45String-asList e-1)))))))))
(define DataC-45String-asList (lambda (arg-0) (DataC-45String-with--asList-9518 arg-0 (DataC-45String-strM arg-0))))
(define PreludeC-45Types-isSpace (lambda (arg-0) (cond ((equal? arg-0 #\ ) 1) ((equal? arg-0 (integer->char 9)) 1) ((equal? arg-0 (integer->char 13)) 1) ((equal? arg-0 (integer->char 10)) 1) ((equal? arg-0 (integer->char 12)) 1) ((equal? arg-0 (integer->char 11)) 1) ((equal? arg-0 (integer->char 160)) 1)(else 0))))
(define DataC-45String-with--ltrim-9542 (lambda (arg-0 arg-1) (cond ((equal? arg-0 "") (case (vector-ref arg-1 0) ((0) "")(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc2 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc2 1) (DataC-45String-with--ltrim-9542 e-1 (e-2))) (else u--str))))))))))(else (let ((e-0 (vector-ref arg-1 1))) (let ((e-1 (vector-ref arg-1 2))) (let ((e-2 (vector-ref arg-1 3))) (let ((u--str (string-cons e-0 e-1))) (let ((sc1 (PreludeC-45Types-isSpace e-0))) (cond ((equal? sc1 1) (DataC-45String-with--ltrim-9542 e-1 (e-2))) (else u--str)))))))))))
(define DataC-45String-ltrim (lambda (arg-0) (DataC-45String-with--ltrim-9542 arg-0 (DataC-45String-asList arg-0))))
(define DataC-45String-trim (lambda (ext-0) (DataC-45String-ltrim (string-reverse (DataC-45String-ltrim (string-reverse ext-0))))))
(define PreludeC-45EqOrd-u--C-60C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char<=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45EqOrd-u--C-62C-61_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>=? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define DataC-45String-parseNumWithoutSign (lambda (arg-0 arg-1) (if (null? arg-0) (box arg-1) (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-2 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-2 #\9)) (else 0))))) (cond ((equal? sc1 1) (DataC-45String-parseNumWithoutSign e-3 (+ (* arg-1 10) (bs- (cast-char-boundedInt e-2 63) (cast-char-boundedInt #\0 63) 63)))) (else '()))))))))
(define DataC-45String-with--parsePositiveC-44parsePosTrimmed-9869 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4) (cond ((equal? arg-3 "") (if (null? arg-4) '() (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc3 (let ((sc4 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc4 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc3 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63)))) (else '())))))))))(else (let ((e-0 (car arg-4))) (let ((e-1 (cdr arg-4))) (cond ((equal? e-0 #\+) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) 0)))(else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char e-0 #\0))) (cond ((equal? sc2 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char e-0 #\9)) (else 0))))) (cond ((equal? sc1 1) (PreludeC-45Types-u--map_Functor_Maybe (lambda (eta-0) (let ((e-3 (vector-ref arg-1 2))) (e-3 eta-0))) (DataC-45String-parseNumWithoutSign (PreludeC-45Types-fastUnpack e-1) (bs- (cast-char-boundedInt e-0 63) (cast-char-boundedInt #\0 63) 63)))) (else '())))))))))))
(define DataC-45String-n--4450-9863-u--parsePosTrimmed (lambda (arg-1 arg-2 arg-3) (DataC-45String-with--parsePositiveC-44parsePosTrimmed-9869 'erased arg-1 arg-3 arg-3 (DataC-45String-strM arg-3))))
(define DataC-45String-parsePositive (lambda (arg-1 arg-2) (DataC-45String-n--4450-9863-u--parsePosTrimmed arg-1 arg-2 (DataC-45String-trim arg-2))))
(define PreludeC-45Types-prim__integerToNat (lambda (arg-0) (let ((sc0 (or (and (<= 0 arg-0) 1) 0))) (cond ((equal? sc0 0) 0)(else arg-0)))))
(define PreludeC-45TypesC-45List-reverseOnto (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-reverseOnto (cons e-2 arg-1) e-3))))))
(define PreludeC-45TypesC-45List-reverse (lambda (ext-0) (PreludeC-45TypesC-45List-reverseOnto '() ext-0)))
(define PreludeC-45TypesC-45List-tailRecAppend (lambda (arg-1 arg-2) (PreludeC-45TypesC-45List-reverseOnto arg-2 (PreludeC-45TypesC-45List-reverse arg-1))))
(define DataC-45String-n--3874-9281-u--wordsHelper (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) arg-2 (cons arg-2 (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '())))))
(define DataC-45String-n--3874-9280-u--wordsC-39 (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-1) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 (DataC-45String-n--3874-9281-u--wordsHelper arg-0 arg-2 arg-3) '()) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (let ((sc1 (PreludeC-45Types-isSpace e-1))) (cond ((equal? sc1 1) (DataC-45String-n--3874-9280-u--wordsC-39 arg-0 e-2 '() (DataC-45String-n--3874-9281-u--wordsHelper arg-0 arg-2 arg-3))) (else (DataC-45String-n--3874-9280-u--wordsC-39 arg-0 e-2 (cons arg-2 e-1) arg-3)))))))))
(define DataC-45String-words (lambda (arg-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45String-n--3874-9280-u--wordsC-39 arg-0 (PreludeC-45Types-fastUnpack arg-0) '() '()))))
(define PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (lambda (arg-2 arg-3) (if (null? arg-2) '() (let ((e-2 (unbox arg-2))) (arg-3 e-2)))))
(define DataC-45List-isPrefixOfBy (lambda (arg-2 arg-3 arg-4) (if (null? arg-3) 1 (if (null? arg-4) 0 (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (let ((e-4 (car arg-4))) (let ((e-5 (cdr arg-4))) (let ((sc4 ((arg-2 e-1) e-4))) (cond ((equal? sc4 1) (DataC-45List-isPrefixOfBy arg-2 e-2 e-5)) (else 0)))))))))))
(define DataC-45List-isPrefixOf (lambda (arg-1 ext-0 ext-1) (DataC-45List-isPrefixOfBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-1))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45String-isPrefixOf (lambda (arg-0 arg-1) (DataC-45List-isPrefixOf csegen-154 (PreludeC-45Types-fastUnpack arg-0) (PreludeC-45Types-fastUnpack arg-1))))
(define TestC-45Golden-n--5360-1766-u--isFlag (lambda (arg-0 arg-1) (DataC-45String-isPrefixOf "--" arg-1)))
(define TestC-45Golden-n--5360-1765-u--go (lambda (arg-0 arg-1 arg-2 arg-3) (if (null? arg-1) (box (cons arg-2 arg-3)) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (cond ((equal? e-2 "--timing") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 e-8 e-4 1 e-6 e-7)))))))))) ((equal? e-2 "--interactive") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 1 e-4 e-5 e-6 e-7)))))))))) ((equal? e-2 "--color") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 e-8 1 e-5 e-6 e-7)))))))))) ((equal? e-2 "--colour") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 e-8 1 e-5 e-6 e-7)))))))))) ((equal? e-2 "--no-color") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 e-8 0 e-5 e-6 e-7)))))))))) ((equal? e-2 "--no-colour") (TestC-45Golden-n--5360-1765-u--go arg-0 e-3 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-9 e-8 0 e-5 e-6 e-7)))))))))) ((equal? e-2 "--cg") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-6 (car e-3))) (let ((e-7 (cdr e-3))) (TestC-45Golden-n--5360-1765-u--go arg-0 e-7 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-11 (vector-ref arg-3 2))) (let ((e-10 (vector-ref arg-3 3))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-9 (vector-ref arg-3 6))) (let ((e-8 (vector-ref arg-3 7))) (vector e-0 (box e-6) e-11 e-10 e-4 e-5 e-9 e-8))))))))))))) ((equal? e-2 "--threads") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-9 (car e-3))) (let ((e-10 (cdr e-3))) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (DataC-45String-parsePositive (vector (lambda (arg-5904) (lambda (arg-5907) (+ arg-5904 arg-5907))) (lambda (arg-5914) (lambda (arg-5917) (* arg-5914 arg-5917))) (lambda (arg-5924) (PreludeC-45Types-prim__integerToNat arg-5924))) e-9) (lambda (bind-0) (TestC-45Golden-n--5360-1765-u--go arg-0 e-10 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-11 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-7 (vector-ref arg-3 7))) (vector e-0 e-1 e-11 e-8 e-4 e-5 bind-0 e-7))))))))))))))) ((equal? e-2 "--failure-file") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-12 (car e-3))) (let ((e-13 (cdr e-3))) (TestC-45Golden-n--5360-1765-u--go arg-0 e-13 arg-2 (let ((e-0 (vector-ref arg-3 0))) (let ((e-1 (vector-ref arg-3 1))) (let ((e-9 (vector-ref arg-3 2))) (let ((e-8 (vector-ref arg-3 3))) (let ((e-4 (vector-ref arg-3 4))) (let ((e-5 (vector-ref arg-3 5))) (let ((e-6 (vector-ref arg-3 6))) (vector e-0 e-1 e-9 e-8 e-4 e-5 e-6 (box e-12)))))))))))))) ((equal? e-2 "--only") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-15 (car e-3))) (let ((e-16 (cdr e-3))) (let ((sc3 (TestC-45Golden-n--5360-1766-u--isFlag arg-0 e-15))) (cond ((equal? sc3 1) (TestC-45Golden-n--5360-1765-u--go arg-0 (cons e-15 e-16) arg-2 arg-3)) (else (TestC-45Golden-n--5360-1765-u--go arg-0 e-16 (let ((e-0 (vector-ref arg-2 0))) (let ((e-1 (vector-ref arg-2 1))) (let ((e-4 (vector-ref arg-2 2))) (vector e-0 (PreludeC-45TypesC-45List-tailRecAppend (DataC-45String-words e-15) e-1) e-4)))) arg-3)))))))) ((equal? e-2 "--except") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-18 (car e-3))) (let ((e-19 (cdr e-3))) (let ((sc3 (TestC-45Golden-n--5360-1766-u--isFlag arg-0 e-18))) (cond ((equal? sc3 1) (TestC-45Golden-n--5360-1765-u--go arg-0 (cons e-18 e-19) arg-2 arg-3)) (else (TestC-45Golden-n--5360-1765-u--go arg-0 e-19 (let ((e-0 (vector-ref arg-2 0))) (let ((e-1 (vector-ref arg-2 1))) (let ((e-4 (vector-ref arg-2 2))) (vector e-0 e-1 (PreludeC-45TypesC-45List-tailRecAppend (DataC-45String-words e-18) e-4))))) arg-3)))))))) ((equal? e-2 "--only-file") (if (null? e-3) (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()) (let ((e-21 (car e-3))) (let ((e-22 (cdr e-3))) (TestC-45Golden-n--5360-1765-u--go arg-0 e-22 (let ((e-1 (vector-ref arg-2 1))) (let ((e-4 (vector-ref arg-2 2))) (vector (box e-21) e-1 e-4))) arg-3)))))(else (if (null? e-3) (PreludeC-45Types-u--C-62C-62C-61_Monad_Maybe (PreludeC-45Interfaces-guard csegen-63 (PreludeC-45Types-elem csegen-24 csegen-66 e-2 csegen-67)) (lambda (_-10649) (box (cons arg-2 arg-3)))) '()))))))))
(define DataC-45List-tails (lambda (arg-1) (cons arg-1 (if (null? arg-1) '() (let ((e-3 (cdr arg-1))) (DataC-45List-tails e-3))))))
(define DataC-45List-isInfixOfBy (lambda (arg-2 arg-3 arg-4) (PreludeC-45Types-u--foldMap_Foldable_List csegen-105 (lambda (eta-0) (DataC-45List-isPrefixOfBy arg-2 arg-3 eta-0)) (DataC-45List-tails arg-4))))
(define DataC-45List-isInfixOf (lambda (arg-1 ext-0 ext-1) (DataC-45List-isInfixOfBy (lambda (eta-0) (lambda (eta-1) (let ((e-1 (car arg-1))) ((e-1 eta-0) eta-1)))) ext-0 ext-1)))
(define DataC-45String-isInfixOf (lambda (arg-0 arg-1) (DataC-45List-isInfixOf csegen-154 (PreludeC-45Types-fastUnpack arg-0) (PreludeC-45Types-fastUnpack arg-1))))
(define TestC-45Golden-optionsTestsFilter (lambda (arg-0 arg-1) (if (null? arg-0) (if (null? arg-1) '() (box (lambda (u--name) (let ((u--onlyCheck (let ((sc2 (PreludeC-45Types-u--null_Foldable_List arg-0))) (cond ((equal? sc2 1) 1) (else (PreludeC-45Types-u--foldMap_Foldable_List csegen-105 (lambda (arg-2) (DataC-45String-isInfixOf arg-2 u--name)) arg-0)))))) (let ((u--exceptCheck (PreludeC-45Types-u--foldMap_Foldable_List csegen-107 (lambda (eta-0) (let ((sc2 (DataC-45String-isInfixOf eta-0 u--name))) (cond ((equal? sc2 1) 0) (else 1)))) arg-1))) (cond ((equal? u--onlyCheck 1) u--exceptCheck) (else 0))))))) (box (lambda (u--name) (let ((u--onlyCheck (let ((sc1 (PreludeC-45Types-u--null_Foldable_List arg-0))) (cond ((equal? sc1 1) 1) (else (PreludeC-45Types-u--foldMap_Foldable_List csegen-105 (lambda (arg-2) (DataC-45String-isInfixOf arg-2 u--name)) arg-0)))))) (let ((u--exceptCheck (PreludeC-45Types-u--foldMap_Foldable_List csegen-107 (lambda (eta-0) (let ((sc1 (DataC-45String-isInfixOf eta-0 u--name))) (cond ((equal? sc1 1) 0) (else 1)))) arg-1))) (cond ((equal? u--onlyCheck 1) u--exceptCheck) (else 0)))))))))
(define System-exitWith (lambda (arg-2 arg-3) (if (null? arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (System-prim__exit 0 eta-0)))) (let ((e-0 (car arg-3))) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (System-prim__exit e-0 eta-0))))))))
(define System-exitFailure (lambda (arg-2) (System-exitWith arg-2 (cons 1 (vector 0 )))))
(define SystemC-45FileC-45Support-ok (lambda (arg-3 arg-4) (let ((e-1 (car arg-3))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-4)))))))
(define SystemC-45FileC-45Error-returnError (lambda (arg-2) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-2))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Error-prim__fileErrno eta-0))))) (lambda (u--err) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 0 (cond ((equal? u--err 0) (vector 1 )) ((equal? u--err 1) (vector 2 )) ((equal? u--err 2) (vector 3 )) ((equal? u--err 3) (vector 4 )) ((equal? u--err 4) (vector 5 ))(else (vector 0 (bs- u--err 5 63)))))))))))))))
(define SystemC-45FileC-45ReadWrite-fPutStr (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__writeLine arg-2 arg-3 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define SystemC-45FileC-45ReadWrite-fPutStrLn (lambda (arg-1 arg-2 arg-3) (SystemC-45FileC-45ReadWrite-fPutStr arg-1 arg-2 (string-append arg-3 "\xa;"))))
(define SystemC-45FileC-45Virtual-stderr (SystemC-45FileC-45Virtual-prim__stderr))
(define System-die (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-7 (car arg-2))) (let ((e-10 (vector-ref e-7 0))) (let ((e-13 (vector-ref e-10 0))) ((((e-13 'erased) 'erased) (lambda (eta-0) (vector 0 ))) (SystemC-45FileC-45ReadWrite-fPutStrLn arg-2 SystemC-45FileC-45Virtual-stderr arg-3)))))) (lambda (_-10649) (System-exitFailure arg-2)))))))
(define DataC-45String-n--3979-9380-u--linesHelp (lambda (arg-0 arg-1 arg-2) (if (null? arg-1) (if (null? arg-2) '() (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--3979-9380-u--linesHelp arg-0 (cons e-2 arg-1) e-3))))))) (if (null? arg-2) (cons (PreludeC-45TypesC-45List-reverse arg-1) '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cond ((equal? e-2 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3))) ((equal? e-2 (integer->char 13)) (if (null? e-3) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3)) (let ((e-5 (car e-3))) (let ((e-6 (cdr e-3))) (cond ((equal? e-5 (integer->char 10)) (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-6)))(else (cons (PreludeC-45TypesC-45List-reverse arg-1) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() e-3))))))))(else (DataC-45String-n--3979-9380-u--linesHelp arg-0 (cons e-2 arg-1) e-3)))))))))
(define DataC-45String-linesC-39 (lambda (arg-0) (DataC-45String-n--3979-9380-u--linesHelp arg-0 '() arg-0)))
(define DataC-45String-lines (lambda (arg-0) (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45String-linesC-39 (PreludeC-45Types-fastUnpack arg-0)))))
(define DataC-45Fuel-forever (lambda () (box (lambda () (DataC-45Fuel-forever)))))
(define PreludeC-45Interfaces-C-42C-62 (lambda (arg-3 arg-4 arg-5) (let ((e-3 (vector-ref arg-3 2))) ((((e-3 'erased) 'erased) (((let ((eff-0 (let ((e-6 (vector-ref arg-3 0))) e-6))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (eta-0) (lambda (eta-1) eta-1))) arg-4)) arg-5))))
(define SystemC-45FileC-45ReadWrite-fEOF (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__eof arg-2 eta-0))))) (lambda (u--res) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63))))))))))))
(define SystemC-45FileC-45Error-fileError (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Error-prim__error arg-2 eta-0))))) (lambda (u--x) (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--x (blodwen-toSignedInt 0 63))))))))))))
(define SystemC-45FFI-free (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FFI-prim__free arg-2 eta-0))))))
(define PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-3 arg-4 ext-0) (let ((e-2 (vector-ref arg-3 1))) ((e-2 'erased) (let ((e-5 (vector-ref arg-4 1))) ((e-5 'erased) ext-0))))))
(define SystemC-45FileC-45ReadWrite-getStringAndFree (lambda (arg-1 arg-2 arg-3) (let ((sc0 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr arg-3) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 1) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Error-fileError arg-1 arg-2)) (lambda (bind-0) (cond ((equal? bind-0 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) e-10)) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-6 (vector-ref arg-8885 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8885 1))) (vector 1 (u--func e-6))))))))) (lambda (u--a) (lambda (arg-9931) (vector 1 arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (case (vector-ref arg-9937 0) ((0) (let ((e-6 (vector-ref arg-9937 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-9937 1))) (case (vector-ref arg-9944 0) ((1) (let ((e-8 (vector-ref arg-9944 1))) (vector 1 (e-6 e-8)))) (else (let ((e-11 (vector-ref arg-9944 1))) (vector 0 e-11)))))))))))) "")))))))) (else (let ((u--s (PreludeC-45IO-prim__getString arg-3))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FFI-free arg-1 arg-3)) (lambda (_-10649) (SystemC-45FileC-45Support-ok arg-1 u--s)))))))))))
(define SystemC-45FileC-45ReadWrite-fGetLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__readLine arg-2 eta-0))))) (lambda (u--res) (SystemC-45FileC-45ReadWrite-getStringAndFree arg-1 arg-2 u--res)))))))
(define SystemC-45FileC-45ReadWrite-fSeekLine (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-prim__seekLine arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int u--res (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 (vector 0 )))))))))))
(define PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 arg-6 arg-7) (let ((e-3 (vector-ref arg-4 2))) ((((e-3 'erased) 'erased) (let ((e-4 (vector-ref arg-4 2))) ((((e-4 'erased) 'erased) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (lambda (clam-0) (lambda (clam-1) (let ((e-10 (vector-ref arg-5 2))) ((((e-10 'erased) 'erased) clam-0) clam-1))))))) arg-6))) arg-7))))
(define PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (lambda (arg-4 arg-5 arg-6 arg-7 arg-8) (let ((e-2 (vector-ref arg-4 1))) ((((e-2 'erased) 'erased) arg-7) (lambda (eta-0) (((let ((eff-0 (let ((e-6 (vector-ref arg-4 0))) (let ((e-9 (vector-ref e-6 0))) e-9)))) (lambda (arg-0) (lambda (arg-1) ((((eff-0 'erased) 'erased) arg-0) arg-1)))) (lambda (clam-0) (let ((e-4 (vector-ref arg-5 2))) ((e-4 'erased) clam-0)))) (let ((e-4 (vector-ref arg-6 2))) ((((((e-4 'erased) 'erased) 'erased) (let ((e-9 (vector-ref arg-4 0))) e-9)) arg-8) eta-0))))))))
(define PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (lambda (arg-4 arg-5 ext-0 ext-1) ((((arg-4 'erased) 'erased) (lambda (arg-1) ((((arg-5 'erased) 'erased) ext-0) arg-1))) ext-1)))
(define SystemC-45FileC-45ReadWrite-readLinesOnto (lambda (arg-1 arg-2 arg-3 arg-4 arg-5) (if (null? arg-4) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 (cons 0 (PreludeC-45TypesC-45List-reverse arg-2))))))) (let ((e-0 (unbox arg-4))) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45ReadWrite-fEOF arg-1 arg-5)) (lambda (_-0) (cond ((equal? _-0 0) (cond ((equal? arg-3 0) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 (let ((e-7 (car arg-1))) e-7) (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-6 (vector-ref arg-8885 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8885 1))) (vector 1 (u--func e-6))))))))) (lambda (u--a) (lambda (arg-9931) (vector 1 arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (case (vector-ref arg-9937 0) ((0) (let ((e-6 (vector-ref arg-9937 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-9937 1))) (case (vector-ref arg-9944 0) ((1) (let ((e-8 (vector-ref arg-9944 1))) (vector 1 (e-6 e-8)))) (else (let ((e-11 (vector-ref arg-9944 1))) (vector 0 e-11)))))))))))) csegen-157 csegen-158) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-6 (vector-ref arg-8885 1))) (vector 0 e-6))) (else (let ((e-6 (vector-ref arg-8885 1))) (vector 1 (u--func e-6))))))))) csegen-174 csegen-178) (SystemC-45FileC-45ReadWrite-fGetLine arg-1 arg-5) (lambda (u--str) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 (cons u--str arg-2) 0 (e-0) arg-5))))(else (let ((e-6 (- arg-3 1))) (PreludeC-45Interfaces-C-42C-62 (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (PreludeC-45InterfacesC-45Functor-u--map_Functor_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) e-14))) (lambda (b-0) (lambda (a-0) (lambda (func-0) (lambda (arg-8886) (case (vector-ref arg-8886 0) ((0) (let ((e-7 (vector-ref arg-8886 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8886 1))) (vector 1 (func-0 e-7))))))))) u--func arg-8885))))) (lambda (u--a) (lambda (arg-9931) (PreludeC-45InterfacesC-45Applicative-u--pure_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (u--b) (lambda (a-0) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-7 (vector-ref arg-8885 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8885 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9932) (vector 1 arg-9932))) (lambda (u--b) (lambda (a-0) (lambda (arg-9937) (lambda (arg-9944) (case (vector-ref arg-9937 0) ((0) (let ((e-7 (vector-ref arg-9937 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9937 1))) (case (vector-ref arg-9944 0) ((1) (let ((e-8 (vector-ref arg-9944 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9944 1))) (vector 0 e-11)))))))))))) arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (PreludeC-45InterfacesC-45Applicative-u--C-60C-42C-62_Applicative_ComposeC-40C-40C-46C-32C-36fC-41C-32C-36gC-41 (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) e-11)) (vector (lambda (b-0) (lambda (a-0) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-7 (vector-ref arg-8885 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-8885 1))) (vector 1 (u--func e-7))))))))) (lambda (a-0) (lambda (arg-9931) (vector 1 arg-9931))) (lambda (b-0) (lambda (a-0) (lambda (arg-9938) (lambda (arg-9945) (case (vector-ref arg-9938 0) ((0) (let ((e-7 (vector-ref arg-9938 1))) (vector 0 e-7))) (else (let ((e-7 (vector-ref arg-9938 1))) (case (vector-ref arg-9945 0) ((1) (let ((e-8 (vector-ref arg-9945 1))) (vector 1 (e-7 e-8)))) (else (let ((e-11 (vector-ref arg-9945 1))) (vector 0 e-11)))))))))))) arg-9937 arg-9944)))))) (SystemC-45FileC-45ReadWrite-fSeekLine arg-1 arg-5) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 arg-2 e-6 (box e-0) arg-5)))))) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (cons 1 (PreludeC-45TypesC-45List-reverse arg-2)))))))))))))))))
(define SystemC-45FileC-45Handle-closeFile (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__close arg-2 eta-0))))))
(define SystemC-45FileC-45Mode-modeStr (lambda (arg-0) (cond ((equal? arg-0 0) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "rb") (else "r")))) ((equal? arg-0 1) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "wb") (else "w")))) ((equal? arg-0 2) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "ab") (else "a")))) ((equal? arg-0 3) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "rb+") (else "r+")))) ((equal? arg-0 4) (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "wb+") (else "w+")))) (else (let ((sc1 SystemC-45Info-isWindows)) (cond ((equal? sc1 1) "ab+") (else "a+")))))))
(define SystemC-45FileC-45Handle-openFile (lambda (arg-1 arg-2 arg-3) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45FileC-45Handle-prim__open arg-2 (SystemC-45FileC-45Mode-modeStr arg-3) eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45FileC-45Support-ok arg-1 u--res))))))))))
(define SystemC-45FileC-45Handle-withFile (lambda (arg-3 arg-4 arg-5 arg-6 arg-7) (let ((e-1 (car arg-3))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-3 arg-4 arg-5)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (arg-7 e-6)) (lambda (u--res) (let ((e-13 (car arg-3))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45FileC-45Handle-closeFile arg-3 e-6)) (lambda (_-10649) (let ((e-18 (car arg-3))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--res)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-3))) (let ((e-11 (vector-ref e-8 0))) (let ((e-14 (vector-ref e-11 0))) ((((e-14 'erased) 'erased) (lambda (eta-0) (vector 0 eta-0))) (arg-6 e-6))))))))))))))
(define SystemC-45FileC-45ReadWrite-readFilePage (lambda (arg-1 arg-2 arg-3 arg-4) (SystemC-45FileC-45Handle-withFile arg-1 arg-4 0 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (SystemC-45FileC-45ReadWrite-readLinesOnto arg-1 '() arg-2 arg-3 eta-0)))))
(define SystemC-45FileC-45ReadWrite-readFile (lambda (arg-1 ext-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-8 (vector-ref e-5 0))) ((((e-8 'erased) 'erased) (lambda (eta-0) (case (vector-ref eta-0 0) ((0) (let ((e-9 (vector-ref eta-0 1))) (vector 0 e-9))) (else (let ((e-9 (vector-ref eta-0 1))) (vector 1 (PreludeC-45Types-fastConcat (Builtin-snd e-9)))))))) (SystemC-45FileC-45ReadWrite-readFilePage arg-1 0 (DataC-45Fuel-forever) ext-0)))))))
(define PrimIO-unsafeCreateWorld (lambda (arg-1) (arg-1 #f)))
(define PrimIO-unsafePerformIO (lambda (arg-1) (PrimIO-unsafeCreateWorld (lambda (u--w) (let ((eff-0 (arg-1 u--w))) eff-0)))))
(define SystemC-45Errno-strerror (lambda (arg-0) (PrimIO-unsafePerformIO (lambda (eta-0) (SystemC-45Errno-prim__strerror arg-0 eta-0)))))
(define SystemC-45FileC-45Error-u--show_Show_FileError (lambda (arg-0) (case (vector-ref arg-0 0) ((0) (let ((e-0 (vector-ref arg-0 1))) (SystemC-45Errno-strerror e-0))) ((1) "File Read Error") ((2) "File Write Error") ((3) "File Not Found") ((4) "Permission Denied") (else "File Exists"))))
(define TestC-45Golden-case--caseC-32blockC-32inC-32optionsC-44mkOptions-2417 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (if (null? arg-6) '() (let ((e-2 (unbox arg-6))) (let ((act-1 ((SystemC-45FileC-45ReadWrite-readFile csegen-43 e-2) ext-0))) (case (vector-ref act-1 0) ((1) (let ((e-3 (vector-ref act-1 1))) (DataC-45String-lines e-3))) (else (let ((e-5 (vector-ref act-1 1))) ((System-die csegen-43 (SystemC-45FileC-45Error-u--show_Show_FileError e-5)) ext-0)))))))))
(define TestC-45Golden-case--optionsC-44mkOptions-2381 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (if (null? arg-4) '() (let ((e-1 (unbox arg-4))) (let ((e-5 (car e-1))) (let ((e-6 (cdr e-1))) (let ((act-1 (TestC-45Golden-case--caseC-32blockC-32inC-32optionsC-44mkOptions-2417 arg-0 arg-1 arg-2 arg-3 e-5 e-6 (let ((e-0 (vector-ref e-5 0))) e-0) ext-0))) (box (let ((e-0 (vector-ref e-6 0))) (let ((e-10 (vector-ref e-6 1))) (let ((e-3 (vector-ref e-6 3))) (let ((e-4 (vector-ref e-6 4))) (let ((e-9 (vector-ref e-6 5))) (let ((e-8 (vector-ref e-6 6))) (let ((e-7 (vector-ref e-6 7))) (vector e-0 e-10 (TestC-45Golden-optionsTestsFilter (PreludeC-45TypesC-45List-tailRecAppend act-1 (let ((e-12 (vector-ref e-5 1))) e-12)) (let ((e-11 (vector-ref e-5 2))) e-11)) e-3 e-4 e-9 e-8 e-7))))))))))))))))
(define TestC-45Golden-n--5360-1767-u--mkOptions (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-1 (let ((act-1 ((System-getEnv csegen-43 "NO_COLOR") ext-0))) (let ((act-2 ((SystemC-45FileC-45Meta-isTTY csegen-43 SystemC-45FileC-45Virtual-stdout) ext-0))) (let ((sc0 (DataC-45Maybe-isNothing act-1))) (cond ((equal? sc0 1) act-2) (else 0))))))) (TestC-45Golden-case--optionsC-44mkOptions-2381 arg-0 arg-2 arg-1 act-1 (TestC-45Golden-n--5360-1765-u--go arg-0 arg-2 TestC-45Golden-initAcc (TestC-45Golden-initOptions arg-1 act-1)) ext-0))))
(define TestC-45Golden-options (lambda (arg-0) (lambda (clam-0) (if (null? arg-0) '() (let ((e-2 (cdr arg-0))) (if (null? e-2) '() (let ((e-4 (car e-2))) (let ((e-5 (cdr e-2))) (TestC-45Golden-n--5360-1767-u--mkOptions arg-0 e-4 e-5 clam-0)))))))))
(define System-exitSuccess (lambda (arg-2) (System-exitWith arg-2 '())))
(define DataC-45String-n--3846-9250-u--unlinesC-39 (lambda (arg-0) (if (null? arg-0) '() (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cons e-2 (cons "\xa;" (DataC-45String-n--3846-9250-u--unlinesC-39 e-3))))))))
(define DataC-45String-fastUnlines (lambda (ext-0) (PreludeC-45Types-fastConcat (DataC-45String-n--3846-9250-u--unlinesC-39 ext-0))))
(define TestC-45Golden-n--7668-3901-u--platformSupport (lambda (arg-0 arg-1) (cond ((equal? arg-1 0) csegen-58) ((equal? arg-1 3) csegen-58)(else 1))))
(define TestC-45Golden-n--7668-3902-u--requirement (lambda (arg-0 arg-1) (cond ((equal? arg-1 0) (cons "CC" (cons "cc" '()))) ((equal? arg-1 1) (cons "CHEZ" (cons "chez" (cons "chezscheme9.5" (cons "chezscheme" (cons "chez-scheme" (cons "scheme" '()))))))) ((equal? arg-1 2) (cons "NODE" (cons "node" '()))) ((equal? arg-1 3) (cons "RACKET" (cons "racket" '()))) (else (cons "GAMBIT" (cons "gsc" '()))))))
(define SystemC-45FileC-45Meta-exists (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45FileC-45Handle-openFile arg-1 arg-2 0)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45FileC-45Handle-closeFile arg-1 e-6)) (lambda (_-10649) (let ((e-13 (car arg-1))) (let ((e-16 (vector-ref e-13 0))) (let ((e-18 (vector-ref e-16 1))) ((e-18 'erased) 1)))))))))) (else (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) 0))))))))))))
(define SystemC-45FileC-45Meta-firstExists (lambda (arg-1 arg-2) (if (null? arg-2) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) '())))) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((e-1 (car arg-1))) (let ((e-6 (vector-ref e-1 1))) ((((e-6 'erased) 'erased) (SystemC-45FileC-45Meta-exists arg-1 e-2)) (lambda (bind-0) (cond ((equal? bind-0 1) (let ((e-9 (car arg-1))) (let ((e-12 (vector-ref e-9 0))) (let ((e-14 (vector-ref e-12 1))) ((e-14 'erased) (box e-2)))))) (else (SystemC-45FileC-45Meta-firstExists arg-1 e-3))))))))))))
(define DataC-45List1-forget (lambda (arg-1) (let ((e-1 (car arg-1))) (let ((e-2 (cdr arg-1))) (cons e-1 e-2)))))
(define DataC-45Maybe-fromMaybe (lambda (arg-1 arg-2) (if (null? arg-2) (arg-1) (let ((e-2 (unbox arg-2))) e-2))))
(define PreludeC-45Types-listBindOnto (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (PreludeC-45TypesC-45List-reverse arg-3) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (PreludeC-45Types-listBindOnto arg-2 (PreludeC-45TypesC-45List-reverseOnto arg-3 (arg-2 e-2)) e-3))))))
(define PreludeC-45Types-listBind (lambda (arg-2 arg-3) (PreludeC-45Types-listBindOnto arg-3 '() arg-2)))
(define SystemC-45Path-pathSeparator (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) #\;) (else #\:))))
(define DataC-45List-span (lambda (arg-1 arg-2) (if (null? arg-2) (cons '() '()) (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (let ((sc1 (arg-1 e-2))) (cond ((equal? sc1 1) (let ((sc2 (DataC-45List-span arg-1 e-3))) (let ((e-5 (car sc2))) (let ((e-4 (cdr sc2))) (cons (cons e-2 e-5) e-4))))) (else (cons '() (cons e-2 e-3))))))))))
(define DataC-45List-break (lambda (arg-1 arg-2) (DataC-45List-span (lambda (eta-0) (let ((sc0 (arg-1 eta-0))) (cond ((equal? sc0 1) 0) (else 1)))) arg-2)))
(define DataC-45List1-singleton (lambda (arg-1) (cons arg-1 '())))
(define DataC-45List-split (lambda (arg-1 arg-2) (let ((sc0 (DataC-45List-break arg-1 arg-2))) (let ((e-2 (car sc0))) (let ((e-3 (cdr sc0))) (if (null? e-3) (DataC-45List1-singleton e-2) (let ((e-7 (cdr e-3))) (cons e-2 (DataC-45List1-forget (DataC-45List-split arg-1 e-7))))))))))
(define DataC-45List1-u--map_Functor_List1 (lambda (arg-2 arg-3) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (cons (arg-2 e-1) (PreludeC-45TypesC-45List-mapAppend '() arg-2 e-2))))))
(define DataC-45String-split (lambda (arg-0 arg-1) (DataC-45List1-u--map_Functor_List1 (lambda (eta-0) (PreludeC-45Types-fastPack eta-0)) (DataC-45List-split arg-0 (PreludeC-45Types-fastUnpack arg-1)))))
(define TestC-45Golden-pathLookup (lambda (arg-0 ext-0) (let ((act-1 ((System-getEnv csegen-43 "PATH") ext-0))) (let ((u--extensions (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) (cons ".exe" (cons ".cmd" (cons ".bat" (cons "" '()))))) (else (cons "" '())))))) (let ((u--pathList (DataC-45List1-forget (DataC-45String-split (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 SystemC-45Path-pathSeparator)) (DataC-45Maybe-fromMaybe (lambda () "/usr/bin:/usr/local/bin") act-1))))) (let ((u--candidates (PreludeC-45Types-listBind u--pathList (lambda (u--p) (PreludeC-45Types-listBind arg-0 (lambda (u--x) (PreludeC-45Types-listBind u--extensions (lambda (u--y) (PreludeC-45Types-u--pure_Applicative_List (string-append u--p (string-append "/" (string-append u--x u--y)))))))))))) ((SystemC-45FileC-45Meta-firstExists csegen-43 u--candidates) ext-0)))))))
(define TestC-45Golden-case--caseC-32blockC-32inC-32checkRequirement-4014 (lambda (arg-0 arg-1 ext-0) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (let ((act-1 ((System-getEnv csegen-43 e-2) ext-0))) (if (null? act-1) (TestC-45Golden-pathLookup e-3 ext-0) (let ((e-1 (unbox act-1))) (box e-1))))))))
(define TestC-45Golden-checkRequirement (lambda (arg-0) (lambda (clam-0) (let ((sc0 (TestC-45Golden-n--7668-3901-u--platformSupport arg-0 arg-0))) (cond ((equal? sc0 1) (TestC-45Golden-case--caseC-32blockC-32inC-32checkRequirement-4014 arg-0 (TestC-45Golden-n--7668-3902-u--requirement arg-0 arg-0) clam-0)) (else '()))))))
(define TestC-45Golden-findCG (lambda (ext-0) (let ((act-1 ((System-getEnv csegen-43 "IDRIS2_TESTS_CG") ext-0))) (if (null? act-1) (let ((act-2 ((TestC-45Golden-checkRequirement 1) ext-0))) (if (null? act-2) (let ((act-3 ((TestC-45Golden-checkRequirement 2) ext-0))) (if (null? act-3) (let ((act-4 ((TestC-45Golden-checkRequirement 3) ext-0))) (if (null? act-4) (let ((act-5 ((TestC-45Golden-checkRequirement 4) ext-0))) (if (null? act-5) (let ((act-6 ((TestC-45Golden-checkRequirement 0) ext-0))) (if (null? act-6) '() (box "refc"))) (box "gsc"))) (box "racket"))) (box "node"))) (box "chez"))) act-1))))
(define PreludeC-45TypesC-45List-lengthPlus (lambda (arg-1 arg-2) (if (null? arg-2) arg-1 (let ((e-3 (cdr arg-2))) (PreludeC-45TypesC-45List-lengthPlus (+ arg-1 1) e-3)))))
(define PreludeC-45TypesC-45List-lengthTR (lambda (ext-0) (PreludeC-45TypesC-45List-lengthPlus 0 ext-0)))
(define PreludeC-45TypesC-45List-filterAppend (lambda (arg-1 arg-2 arg-3) (if (null? arg-3) (PreludeC-45TypesC-45SnocList-C-60C-62C-62 arg-1 '()) (let ((e-1 (car arg-3))) (let ((e-2 (cdr arg-3))) (let ((sc1 (arg-2 e-1))) (cond ((equal? sc1 1) (PreludeC-45TypesC-45List-filterAppend (cons arg-1 e-1) arg-2 e-2)) (else (PreludeC-45TypesC-45List-filterAppend arg-1 arg-2 e-2)))))))))
(define TestC-45Golden-filterTests (lambda (arg-0) (lambda (clam-0) (let ((e-2 (vector-ref arg-0 2))) (if (null? e-2) clam-0 (let ((e-8 (unbox e-2))) (PreludeC-45TypesC-45List-filterAppend '() e-8 clam-0)))))))
(define TestC-45Golden-initSummary (cons '() '()))
(define TestC-45Golden-toList (lambda (arg-0) (case (vector-ref arg-0 0) ((2) (let ((e-0 (vector-ref arg-0 1))) (cons e-0 '())))(else '()))))
(define TestC-45Golden-u--show_Show_Requirement (lambda (arg-0) (cond ((equal? arg-0 0) "C") ((equal? arg-0 1) "Chez") ((equal? arg-0 2) "node") ((equal? arg-0 3) "racket") (else "gambit"))))
(define DataC-45List-u--unzipWith_Zippable_List (lambda (arg-3 arg-4) (if (null? arg-4) (cons '() '()) (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (let ((sc1 (arg-3 e-2))) (let ((e-5 (car sc1))) (let ((e-4 (cdr sc1))) (let ((sc2 (DataC-45List-u--unzipWith_Zippable_List arg-3 e-3))) (let ((e-7 (car sc2))) (let ((e-6 (cdr sc2))) (cons (cons e-5 e-7) (cons e-4 e-6)))))))))))))
(define DataC-45List-u--unzip_Zippable_List (lambda (ext-0) (DataC-45List-u--unzipWith_Zippable_List (lambda (eta-0) eta-0) ext-0)))
(define SystemC-45Concurrency-channelGet (lambda (arg-2 arg-3) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Concurrency-prim__channelGet 'erased arg-3 eta-0))))))
(define PreludeC-45Interfaces-traverse_ (lambda (arg-4 arg-5 arg-6 ext-0) (let ((e-1 (vector-ref arg-5 0))) (((((e-1 'erased) 'erased) (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-C-42C-62 arg-4 (arg-6 eta-0) eta-1)))) (let ((e-8 (vector-ref arg-4 1))) ((e-8 'erased) (vector 0 )))) ext-0))))
(define PreludeC-45Interfaces-for_ (lambda (arg-4 arg-5 ext-0 ext-1) (PreludeC-45Basics-flip (lambda (eta-0) (lambda (eta-1) (PreludeC-45Interfaces-traverse_ arg-4 arg-5 eta-0 eta-1))) ext-0 ext-1)))
(define PreludeC-45IO-fork (lambda (arg-0 ext-0) (PreludeC-45IO-prim__fork arg-0 ext-0)))
(define DataC-45List-replicateTR (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 0) arg-1)(else (let ((e-0 (- arg-2 1))) (DataC-45List-replicateTR (cons arg-3 arg-1) e-0 arg-3))))))
(define PreludeC-45Interfaces-sequence (lambda (arg-3 arg-4 ext-0) (let ((e-3 (vector-ref arg-4 2))) ((((((e-3 'erased) 'erased) 'erased) arg-3) (lambda (eta-0) eta-0)) ext-0))))
(define SystemC-45Concurrency-channelPut (lambda (arg-2 arg-3 arg-4) (let ((e-2 (cdr arg-2))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Concurrency-prim__channelPut 'erased arg-3 arg-4 eta-0))))))
(define TestC-45Golden-updateSummary (lambda (arg-0 ext-0) (case (vector-ref arg-0 0) ((0) (let ((e-2 (vector-ref arg-0 1))) (let ((e-0 (car ext-0))) (let ((e-1 (cdr ext-0))) (cons e-0 (cons e-2 e-1)))))) (else (let ((e-5 (vector-ref arg-0 1))) (let ((e-0 (car ext-0))) (let ((e-1 (cdr ext-0))) (cons (cons e-5 e-0) e-1))))))))
(define TestC-45Golden-testReceiver (lambda (arg-0 arg-1 arg-2 arg-3) (cond ((equal? arg-3 0) (SystemC-45Concurrency-channelPut csegen-43 arg-2 arg-1))(else (let ((e-0 (- arg-3 1))) (lambda (world-0) (let ((act-1 ((SystemC-45Concurrency-channelGet csegen-43 arg-0) world-0))) (let ((u--nThreads (+ e-0 1))) (if (null? act-1) ((TestC-45Golden-testReceiver arg-0 arg-1 arg-2 e-0) world-0) (let ((e-1 (unbox act-1))) ((TestC-45Golden-testReceiver arg-0 (TestC-45Golden-updateSummary e-1 arg-1) arg-2 u--nThreads) world-0)))))))))))
(define TestC-45Golden-testSender (lambda (arg-0 arg-1 arg-2) (cond ((equal? arg-1 0) (lambda (clam-0) (if (null? arg-2) (vector 0 ) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((act-1 ((SystemC-45Concurrency-channelPut csegen-43 arg-0 (box e-1)) clam-0))) ((TestC-45Golden-testSender arg-0 arg-1 e-2) clam-0)))))))(else (let ((e-3 (- arg-1 1))) (lambda (clam-1) (if (null? arg-2) (let ((act-1 ((SystemC-45Concurrency-channelPut csegen-43 arg-0 '()) clam-1))) ((TestC-45Golden-testSender arg-0 e-3 '()) clam-1)) (let ((e-1 (car arg-2))) (let ((e-2 (cdr arg-2))) (let ((act-1 ((SystemC-45Concurrency-channelPut csegen-43 arg-0 (box e-1)) clam-1))) ((TestC-45Golden-testSender arg-0 arg-1 e-2) clam-1)))))))))))
(define SystemC-45Clock-isClockMandatory (lambda (arg-0) (cond ((equal? arg-0 5) 1) ((equal? arg-0 6) 1)(else 0))))
(define SystemC-45Clock-clockTimeGcCpu (lambda (ext-0) (SystemC-45Clock-prim__clockTimeGcCpu ext-0)))
(define SystemC-45Clock-clockTimeGcReal (lambda (ext-0) (SystemC-45Clock-prim__clockTimeGcReal ext-0)))
(define SystemC-45Clock-clockTimeMonotonic (lambda (ext-0) (SystemC-45Clock-prim__clockTimeMonotonic ext-0)))
(define SystemC-45Clock-clockTimeProcess (lambda (ext-0) (SystemC-45Clock-prim__clockTimeProcess ext-0)))
(define SystemC-45Clock-clockTimeThread (lambda (ext-0) (SystemC-45Clock-prim__clockTimeThread ext-0)))
(define SystemC-45Clock-clockTimeUtc (lambda (ext-0) (SystemC-45Clock-prim__clockTimeUtc ext-0)))
(define SystemC-45Clock-fetchOSClock (lambda (arg-0 ext-0) (cond ((equal? arg-0 0) (SystemC-45Clock-clockTimeUtc ext-0)) ((equal? arg-0 1) (SystemC-45Clock-clockTimeMonotonic ext-0)) ((equal? arg-0 3) (SystemC-45Clock-clockTimeProcess ext-0)) ((equal? arg-0 4) (SystemC-45Clock-clockTimeThread ext-0)) ((equal? arg-0 5) (SystemC-45Clock-clockTimeGcCpu ext-0)) ((equal? arg-0 6) (SystemC-45Clock-clockTimeGcReal ext-0)) (else (SystemC-45Clock-clockTimeMonotonic ext-0)))))
(define SystemC-45Clock-osClockNanosecond (lambda (arg-0 ext-0) (SystemC-45Clock-prim__osClockNanosecond arg-0 ext-0)))
(define SystemC-45Clock-osClockSecond (lambda (arg-0 ext-0) (SystemC-45Clock-prim__osClockSecond arg-0 ext-0)))
(define SystemC-45Clock-fromOSClock (lambda (arg-0 arg-1 ext-0) (let ((act-1 (SystemC-45Clock-osClockSecond arg-1 ext-0))) (let ((act-2 (SystemC-45Clock-osClockNanosecond arg-1 ext-0))) (vector arg-0 act-1 act-2)))))
(define SystemC-45Clock-osClockValid (lambda (arg-0 ext-0) (SystemC-45Clock-prim__osClockValid arg-0 ext-0)))
(define SystemC-45Clock-with--clockTime-4345 (lambda (arg-0 arg-1 ext-0) (cond ((equal? arg-1 0) (let ((act-1 (SystemC-45Clock-fetchOSClock arg-0 ext-0))) (SystemC-45Clock-fromOSClock arg-0 act-1 ext-0))) (else (let ((act-1 (SystemC-45Clock-fetchOSClock arg-0 ext-0))) (let ((act-2 (PreludeC-45IO-u--map_Functor_IO (lambda (arg-2) (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-2 (blodwen-toSignedInt 1 63))) (lambda (eta-0) (SystemC-45Clock-osClockValid act-1 eta-0)) ext-0))) (cond ((equal? act-2 1) (PreludeC-45IO-u--map_Functor_IO (lambda (eta-0) (box eta-0)) (lambda (eta-0) (SystemC-45Clock-fromOSClock arg-0 act-1 eta-0)) ext-0)) (else '()))))))))
(define SystemC-45Clock-clockTime (lambda (arg-0 ext-0) (SystemC-45Clock-with--clockTime-4345 arg-0 (SystemC-45Clock-isClockMandatory arg-0) ext-0)))
(define SystemC-45Escape-n--3241-886-u--escapeArgChar (lambda (arg-0 arg-1) (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\%))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\^))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\&))) (cond ((equal? sc4 1) 1) (else (let ((sc5 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\<))) (cond ((equal? sc5 1) 1) (else (let ((sc6 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\>))) (cond ((equal? sc6 1) 1) (else (let ((sc7 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\|))) (cond ((equal? sc7 1) 1) (else (let ((sc8 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\'))) (cond ((equal? sc8 1) 1) (else (let ((sc9 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\"))) (cond ((equal? sc9 1) 1) (else (let ((sc10 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\`))) (cond ((equal? sc10 1) 1) (else (let ((sc11 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\ ))) (cond ((equal? sc11 1) 1) (else (let ((sc12 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 9)))) (cond ((equal? sc12 1) 1) (else (let ((sc13 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 10)))) (cond ((equal? sc13 1) 1) (else (let ((sc14 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\;))) (cond ((equal? sc14 1) 1) (else (let ((sc15 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\,))) (cond ((equal? sc15 1) 1) (else (let ((sc16 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\=))) (cond ((equal? sc16 1) 1) (else (let ((sc17 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 11)))) (cond ((equal? sc17 1) 1) (else (let ((sc18 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 12)))) (cond ((equal? sc18 1) 1) (else (let ((sc19 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 (integer->char 255)))) (cond ((equal? sc19 1) 1) (else (let ((sc20 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\())) (cond ((equal? sc20 1) 1) (else (let ((sc21 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\)))) (cond ((equal? sc21 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (cond ((equal? sc1 1) (cons #\^ (cons arg-1 '()))) (else (cons arg-1 '()))))) (else (let ((sc1 (let ((sc2 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\$))) (cond ((equal? sc2 1) 1) (else (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\`))) (cond ((equal? sc3 1) 1) (else (let ((sc4 (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\\))) (cond ((equal? sc4 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\")))))))))))) (cond ((equal? sc1 1) (cons #\\ (cons arg-1 '()))) (else (cons arg-1 '())))))))))
(define SystemC-45Escape-escapeArg (lambda (arg-0) (let ((u--escapedCmdChars (PreludeC-45Types-fastPack (PreludeC-45Types-listBind (PreludeC-45Types-fastUnpack arg-0) (lambda (eta-0) (SystemC-45Escape-n--3241-886-u--escapeArgChar arg-0 eta-0)))))) (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) u--escapedCmdChars) (else (string-append "\"" (string-append u--escapedCmdChars "\""))))))))
(define PreludeC-45Types-maybe (lambda (arg-2 arg-3 arg-4) (if (null? arg-4) (arg-2) (let ((e-2 (unbox arg-4))) ((arg-3) e-2)))))
(define TestC-45Golden-normalize (lambda (arg-0) (let ((sc0 SystemC-45Info-isWindows)) (cond ((equal? sc0 1) (PreludeC-45Types-fastPack (PreludeC-45TypesC-45List-filterAppend '() (lambda (u--ch) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Char u--ch #\/))) (cond ((equal? sc1 1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Char u--ch #\\)) (else 0)))) (PreludeC-45Types-fastUnpack arg-0)))) (else arg-0)))))
(define System-system (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (System-prim__system arg-2 eta-0))))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (= arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45Num-u--div_Integral_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-1 0))) (cond ((equal? sc0 0) (blodwen-euclidDiv arg-0 arg-1))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in div at Prelude.Num:91:3--93:44")))))))
(define PreludeC-45Num-u--mod_Integral_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-1 0))) (cond ((equal? sc0 0) (blodwen-euclidMod arg-0 arg-1))(else (blodwen-error-quit (string-append "ERROR: " "Unhandled input for Prelude.Num.case block in mod at Prelude.Num:94:3--96:44")))))))
(define SystemC-45Clock-fromNano (lambda (arg-0 arg-1) (let ((u--seconds (PreludeC-45Num-u--div_Integral_Integer arg-1 1000000000))) (let ((u--nanoseconds (PreludeC-45Num-u--mod_Integral_Integer arg-1 1000000000))) (vector arg-0 u--seconds u--nanoseconds)))))
(define SystemC-45Clock-toNano (lambda (arg-1) (let ((e-1 (vector-ref arg-1 1))) (let ((e-2 (vector-ref arg-1 2))) (+ (* e-1 1000000000) e-2)))))
(define SystemC-45Clock-timeDifference (lambda (arg-1 arg-2) (SystemC-45Clock-fromNano 2 (- (SystemC-45Clock-toNano arg-1) (SystemC-45Clock-toNano arg-2)))))
(define ControlC-45ANSI-colored (lambda (arg-0 ext-0) (cons (cons (vector 1 arg-0) '()) ext-0)))
(define DataC-45List-mergeReplicate (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons arg-1 (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3))))))))
(define DataC-45List-intersperse (lambda (arg-1 arg-2) (if (null? arg-2) '() (let ((e-2 (car arg-2))) (let ((e-3 (cdr arg-2))) (cons e-2 (DataC-45List-mergeReplicate arg-1 e-3)))))))
(define ControlC-45ANSIC-45SGR-u--cast_Cast_Blink_String (lambda (arg-0) (cond ((equal? arg-0 0) "5") ((equal? arg-0 1) "6") (else "25"))))
(define ControlC-45ANSIC-45SGR-u--cast_Cast_Color_String (lambda (arg-0) (cond ((equal? arg-0 0) "0") ((equal? arg-0 1) "1") ((equal? arg-0 2) "2") ((equal? arg-0 3) "3") ((equal? arg-0 4) "4") ((equal? arg-0 5) "5") ((equal? arg-0 6) "6") ((equal? arg-0 7) "7") ((equal? arg-0 8) "8") ((equal? arg-0 9) "9") ((equal? arg-0 10) "10") ((equal? arg-0 11) "11") ((equal? arg-0 12) "12") ((equal? arg-0 13) "13") ((equal? arg-0 14) "14") (else "15"))))
(define ControlC-45ANSIC-45SGR-u--cast_Cast_Style_String (lambda (arg-0) (cond ((equal? arg-0 0) "1") ((equal? arg-0 1) "2") ((equal? arg-0 2) "22") ((equal? arg-0 3) "3") ((equal? arg-0 4) "4") ((equal? arg-0 5) "21") ((equal? arg-0 6) "24") ((equal? arg-0 7) "9") (else "29"))))
(define ControlC-45ANSIC-45SGR-n--3452-2723-u--toCode (lambda (arg-0 arg-1) (case (vector-ref arg-1 0) ((0) "0") ((1) (let ((e-0 (vector-ref arg-1 1))) (string-append "38;5;" (ControlC-45ANSIC-45SGR-u--cast_Cast_Color_String e-0)))) ((2) (let ((e-1 (vector-ref arg-1 1))) (string-append "48;5;" (ControlC-45ANSIC-45SGR-u--cast_Cast_Color_String e-1)))) ((3) (let ((e-2 (vector-ref arg-1 1))) (ControlC-45ANSIC-45SGR-u--cast_Cast_Style_String e-2))) (else (let ((e-3 (vector-ref arg-1 1))) (ControlC-45ANSIC-45SGR-u--cast_Cast_Blink_String e-3))))))
(define ControlC-45ANSIC-45SGR-escapeSGR (lambda (arg-0) (string-append "\x1b;[" (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-57 (lambda (eta-0) eta-0) (DataC-45List-intersperse ";" (PreludeC-45TypesC-45List-mapAppend '() (lambda (eta-0) (ControlC-45ANSIC-45SGR-n--3452-2723-u--toCode arg-0 eta-0)) arg-0))) "m"))))
(define ControlC-45ANSI-u--show_Show_DecoratedString (lambda (arg-0) (string-append (ControlC-45ANSIC-45SGR-escapeSGR (let ((e-0 (car arg-0))) e-0)) (string-append (let ((e-1 (cdr arg-0))) e-1) (ControlC-45ANSIC-45SGR-escapeSGR (cons (vector 0 ) '()))))))
(define TestC-45Golden-n--6299-2630-u--maybeColored (lambda (arg-0 arg-1 arg-2 ext-0) (let ((sc0 (let ((e-4 (vector-ref arg-1 4))) e-4))) (cond ((equal? sc0 1) (ControlC-45ANSI-u--show_Show_DecoratedString (ControlC-45ANSI-colored arg-2 ext-0))) (else ext-0)))))
(define TestC-45Golden-n--6299-2627-u--expVsOut (lambda (arg-0 arg-1 arg-2 arg-3) (cons "Expected:" (cons (TestC-45Golden-n--6299-2630-u--maybeColored arg-0 arg-1 2 arg-2) (cons "Given:" (cons (TestC-45Golden-n--6299-2630-u--maybeColored arg-0 arg-1 1 arg-3) '()))))))
(define PreludeC-45Interfaces-when (lambda (arg-1 arg-2 arg-3) (cond ((equal? arg-2 1) (arg-3)) (else (let ((e-2 (vector-ref arg-1 1))) ((e-2 'erased) (vector 0 )))))))
(define SystemC-45FileC-45ReadWrite-writeFile (lambda (arg-1 arg-2 arg-3) (SystemC-45FileC-45Handle-withFile arg-1 arg-2 1 (lambda (eta-0) (let ((e-1 (car arg-1))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) eta-0))))) (lambda (eta-0) (PreludeC-45Basics-flip (lambda (eta-1) (lambda (eta-2) (SystemC-45FileC-45ReadWrite-fPutStr arg-1 eta-1 eta-2))) arg-3 eta-0)))))
(define TestC-45Golden-n--6299-2626-u--badSystemExitCode (lambda (arg-0 arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Int arg-2 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc0 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_Int arg-2 (blodwen-toSignedInt 127 63)))))))
(define TestC-45Golden-n--6299-2628-u--getAnswer (lambda (arg-0 arg-1 ext-0) (let ((act-1 (PreludeC-45IO-prim__getStr ext-0))) (cond ((equal? act-1 "y") 1) ((equal? act-1 "n") 0) ((equal? act-1 "N") 0) ((equal? act-1 "") 0)(else (let ((act-2 (PreludeC-45IO-prim__putStr "Invalid answer.\xa;" ext-0))) (TestC-45Golden-n--6299-2628-u--getAnswer arg-0 arg-1 ext-0)))))))
(define TestC-45Golden-n--6299-2629-u--mayOverwrite (lambda (arg-0 arg-1 arg-2 arg-3 ext-0) (let ((act-1 (if (null? arg-2) (PreludeC-45IO-prim__putStr (DataC-45String-fastUnlines (cons "Golden value missing. I computed the following result:" (cons (TestC-45Golden-n--6299-2630-u--maybeColored arg-0 arg-1 12 arg-3) (cons "Accept new golden value? [y/N]" '())))) ext-0) (let ((e-2 (unbox arg-2))) (let ((act-1 ((System-system csegen-43 (string-append "git diff --no-index --exit-code --word-diff-regex=. " (string-append (let ((sc1 (let ((e-4 (vector-ref arg-1 4))) e-4))) (cond ((equal? sc1 1) "--color ") (else ""))) (string-append (SystemC-45Escape-escapeArg arg-0) (string-append "/expected " (string-append (SystemC-45Escape-escapeArg arg-0) "/output")))))) ext-0))) (PreludeC-45IO-prim__putStr (DataC-45String-fastUnlines (PreludeC-45TypesC-45List-tailRecAppend (cons "Golden value differs from actual value." '()) (PreludeC-45TypesC-45List-tailRecAppend (let ((sc1 (TestC-45Golden-n--6299-2626-u--badSystemExitCode arg-0 arg-1 act-1))) (cond ((equal? sc1 1) (TestC-45Golden-n--6299-2627-u--expVsOut arg-0 arg-1 e-2 arg-3)) (else '()))) (cons "Accept actual value as new golden value? [y/N]" '())))) ext-0)))))) (let ((act-2 (TestC-45Golden-n--6299-2628-u--getAnswer arg-0 arg-1 ext-0))) ((PreludeC-45Interfaces-when csegen-36 act-2 (lambda () (lambda (world-0) (let ((act-3 ((SystemC-45FileC-45ReadWrite-writeFile csegen-43 (string-append arg-0 "/expected") arg-3) world-0))) (case (vector-ref act-3 0) ((1) (vector 0 )) (else (let ((e-5 (vector-ref act-3 1))) (PreludeC-45IO-prim__putStr (string-append (string-append (string-append arg-0 "/expected") (string-append ": " (SystemC-45FileC-45Error-u--show_Show_FileError e-5))) "\xa;") world-0)))))))) ext-0)))))
(define DataC-45Nat-fromLteSucc (lambda (arg-2) (cond ((equal? arg-2 0) (blodwen-error-quit "Nat case not covered"))(else (let ((e-2 (- arg-2 1))) e-2)))))
(define DataC-45Nat-succNotLTEzero (lambda (arg-0) (blodwen-error-quit "No clauses")))
(define DataC-45Nat-isLTE (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (vector 0 0))(else (let ((e-0 (- arg-0 1))) (cond ((equal? arg-1 0) (vector 1 (lambda (eta-0) (DataC-45Nat-succNotLTEzero eta-0))))(else (let ((e-1 (- arg-1 1))) (let ((sc0 (DataC-45Nat-isLTE e-0 e-1))) (case (vector-ref sc0 0) ((1) (let ((e-2 (vector-ref sc0 1))) (vector 1 (lambda (eta-0) (e-2 (DataC-45Nat-fromLteSucc eta-0)))))) (else (let ((e-3 (vector-ref sc0 1))) (vector 0 (+ e-3 1))))))))))))))
(define PreludeC-45TypesC-45String-length (lambda (arg-0) (PreludeC-45Types-prim__integerToNat (string-length arg-0))))
(define PreludeC-45EqOrd-u--C-60_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (or (and (< arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45Types-substr (lambda (arg-0 arg-1 arg-2) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 (PreludeC-45TypesC-45String-length arg-2)))) (cond ((equal? sc0 1) (string-substr (blodwen-toSignedInt arg-0 63) (blodwen-toSignedInt arg-1 63) arg-2)) (else "")))))
(define DataC-45StringC-45Extra-leftEllipsis (lambda (arg-0 arg-1 arg-2) (let ((u--len (PreludeC-45TypesC-45String-length arg-2))) (let ((sc0 (DataC-45Nat-isLTE u--len arg-0))) (case (vector-ref sc0 0) ((0) arg-2) (else (string-append arg-1 (PreludeC-45Types-substr (PreludeC-45Types-prim__integerToNat (- (+ u--len (PreludeC-45TypesC-45String-length arg-1)) arg-0)) u--len arg-2))))))))
(define DataC-45String-replicate (lambda (arg-0 arg-1) (PreludeC-45Types-fastPack (DataC-45List-replicateTR '() arg-0 arg-1))))
(define DataC-45String-padLeft (lambda (arg-0 arg-1 arg-2) (string-append (DataC-45String-replicate (PreludeC-45Types-prim__integerToNat (- arg-0 (PreludeC-45TypesC-45String-length arg-2))) arg-1) arg-2)))
(define DataC-45String-padRight (lambda (arg-0 arg-1 arg-2) (string-append arg-2 (DataC-45String-replicate (PreludeC-45Types-prim__integerToNat (- arg-0 (PreludeC-45TypesC-45String-length arg-2))) arg-1))))
(define PreludeC-45Show-firstCharIs (lambda (arg-0 arg-1) (cond ((equal? arg-1 "") 0)(else (arg-0 (string-ref arg-1 0))))))
(define PreludeC-45Show-showParens (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) arg-1) (else (string-append "(" (string-append arg-1 ")"))))))
(define PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (lambda (arg-0 arg-1) (cond ((equal? arg-0 0) (cond ((equal? arg-1 0) 1)(else 0))) ((equal? arg-0 1) (cond ((equal? arg-1 1) 1)(else 0))) ((equal? arg-0 2) (cond ((equal? arg-1 2) 1)(else 0)))(else 0))))
(define PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else 1)))))
(define PreludeC-45Show-precCon (lambda (arg-0) (case (vector-ref arg-0 0) ((0) 0) ((1) 1) ((2) 2) ((3) 3) ((4) 4) ((5) 5) (else 6))))
(define PreludeC-45EqOrd-u--compare_Ord_Integer (lambda (arg-0 arg-1) (let ((sc0 (PreludeC-45EqOrd-u--C-60_Ord_Integer arg-0 arg-1))) (cond ((equal? sc0 1) 0) (else (let ((sc1 (PreludeC-45EqOrd-u--C-61C-61_Eq_Integer arg-0 arg-1))) (cond ((equal? sc1 1) 1) (else 2))))))))
(define PreludeC-45Show-u--compare_Ord_Prec (lambda (arg-0 arg-1) (case (vector-ref arg-0 0) ((4) (let ((e-0 (vector-ref arg-0 1))) (case (vector-ref arg-1 0) ((4) (let ((e-1 (vector-ref arg-1 1))) (PreludeC-45EqOrd-u--compare_Ord_Integer e-0 e-1)))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))(else (PreludeC-45EqOrd-u--compare_Ord_Integer (PreludeC-45Show-precCon arg-0) (PreludeC-45Show-precCon arg-1))))))
(define PreludeC-45Show-u--C-62C-61_Ord_Prec (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-47C-61_Eq_Ordering (PreludeC-45Show-u--compare_Ord_Prec arg-0 arg-1) 0)))
(define PreludeC-45Show-primNumShow (lambda (arg-1 arg-2 arg-3) (let ((u--str (arg-1 arg-3))) (PreludeC-45Show-showParens (let ((sc0 (PreludeC-45Show-u--C-62C-61_Ord_Prec arg-2 (vector 5 )))) (cond ((equal? sc0 1) (PreludeC-45Show-firstCharIs (lambda (arg-0) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-0 #\-)) u--str)) (else 0))) u--str))))
(define PreludeC-45Show-u--showPrec_Show_Integer (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--show_Show_Integer (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Integer (vector 0 ) arg-0)))
(define SystemC-45Clock-showTime (lambda (arg-1 arg-2 arg-3) (let ((e-1 (vector-ref arg-3 1))) (let ((e-2 (vector-ref arg-3 2))) (let ((u--secondsC-39 (PreludeC-45Show-u--show_Show_Integer e-1))) (let ((u--nanosecondsC-39 (PreludeC-45Show-u--show_Show_Integer e-2))) (PreludeC-45Types-u--foldMap_Foldable_List csegen-57 (lambda (eta-0) eta-0) (cons (DataC-45String-padLeft arg-1 #\0 u--secondsC-39) (cons (let ((sc0 (or (and (= arg-2 0) 1) 0))) (cond ((equal? sc0 1) "") (else "."))) (cons (DataC-45String-padRight arg-2 #\0 (PreludeC-45Types-substr 0 arg-2 (DataC-45String-padLeft 9 #\0 u--nanosecondsC-39))) (cons "s" '())))))))))))
(define TestC-45Golden-n--6299-2631-u--printTiming (lambda (arg-0 arg-1 arg-3 arg-4 arg-5 arg-6) (cond ((equal? arg-3 0) (lambda (eta-0) (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-57 (lambda (eta-1) eta-1) (cons arg-5 (cons ": " (cons arg-6 '())))) "\xa;") eta-0))) (else (let ((u--time (SystemC-45Clock-showTime 2 3 arg-4))) (let ((u--path (DataC-45StringC-45Extra-leftEllipsis (PreludeC-45Types-prim__integerToNat (- 72 (+ (PreludeC-45TypesC-45String-length u--time) 10))) "(...)" arg-5))) (let ((u--spent (+ (+ (PreludeC-45TypesC-45String-length u--time) (PreludeC-45TypesC-45String-length u--path)) 9))) (let ((u--pad (PreludeC-45Types-fastPack (DataC-45List-replicateTR '() (PreludeC-45Types-prim__integerToNat (- 72 u--spent)) #\ )))) (lambda (eta-0) (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Types-u--foldMap_Foldable_List csegen-57 (lambda (eta-1) eta-1) (cons u--path (cons ": " (cons arg-6 (cons u--pad (cons u--time '())))))) "\xa;") eta-0))))))))))
(define TestC-45Golden-runTest (lambda (arg-0 arg-1 ext-0) (let ((act-1 (SystemC-45Clock-clockTime 0 ext-0))) (let ((u--cg (PreludeC-45Types-maybe (lambda () "") (lambda () (lambda (arg-2) (string-append " --cg " arg-2))) (let ((e-1 (vector-ref arg-0 1))) e-1)))) (let ((u--exe (string-append "\"" (string-append (let ((e-0 (vector-ref arg-0 0))) e-0) (string-append u--cg "\""))))) (let ((act-2 (PreludeC-45IO-u--map_Functor_IO (lambda (eta-0) (vector 0 )) (System-system csegen-43 (string-append "cd " (string-append (SystemC-45Escape-escapeArg arg-1) (string-append " && " (string-append "sh ./run " (string-append u--exe " | tr -d '\\r' > output")))))) ext-0))) (let ((act-3 (SystemC-45Clock-clockTime 0 ext-0))) (let ((act-4 ((SystemC-45FileC-45ReadWrite-readFile csegen-43 (string-append arg-1 "/output")) ext-0))) (case (vector-ref act-4 0) ((1) (let ((e-2 (vector-ref act-4 1))) (let ((act-5 ((SystemC-45FileC-45ReadWrite-readFile csegen-43 (string-append arg-1 "/expected")) ext-0))) (case (vector-ref act-5 0) ((1) (let ((e-3 (vector-ref act-5 1))) (let ((u--result (PreludeC-45EqOrd-u--C-61C-61_Eq_String (TestC-45Golden-normalize e-2) (TestC-45Golden-normalize e-3)))) (let ((u--time (SystemC-45Clock-timeDifference act-3 act-1))) (let ((act-6 (cond ((equal? u--result 1) ((TestC-45Golden-n--6299-2631-u--printTiming arg-1 arg-0 (let ((e-5 (vector-ref arg-0 5))) e-5) u--time arg-1 (TestC-45Golden-n--6299-2630-u--maybeColored arg-1 arg-0 10 "success")) ext-0)) (else (let ((act-6 ((TestC-45Golden-n--6299-2631-u--printTiming arg-1 arg-0 (let ((e-5 (vector-ref arg-0 5))) e-5) u--time arg-1 (TestC-45Golden-n--6299-2630-u--maybeColored arg-1 arg-0 9 "FAILURE")) ext-0))) (((let ((sc3 (let ((e-8 (vector-ref arg-0 3))) e-8))) (cond ((equal? sc3 1) (lambda () (lambda (eta-0) (TestC-45Golden-n--6299-2629-u--mayOverwrite arg-1 arg-0 (box e-3) e-2 eta-0)))) (else (lambda () (lambda (eta-0) (PreludeC-45IO-prim__putStr (DataC-45String-fastUnlines (TestC-45Golden-n--6299-2627-u--expVsOut arg-1 arg-0 e-3 e-2)) eta-0))))))) ext-0)))))) (cond ((equal? u--result 1) (vector 1 arg-1)) (else (vector 0 arg-1)))))))) (else (let ((e-5 (vector-ref act-5 1))) (case (vector-ref e-5 0) ((3) (let ((act-6 (let ((sc3 (let ((e-3 (vector-ref arg-0 3))) e-3))) (cond ((equal? sc3 1) (TestC-45Golden-n--6299-2629-u--mayOverwrite arg-1 arg-0 '() e-2 ext-0)) (else (PreludeC-45IO-prim__putStr (string-append (string-append (string-append arg-1 "/expected") (string-append ": " (SystemC-45FileC-45Error-u--show_Show_FileError (vector 3 )))) "\xa;") ext-0)))))) (vector 0 arg-1)))(else (let ((act-6 (PreludeC-45IO-prim__putStr (string-append (string-append (string-append arg-1 "/expected") (string-append ": " (SystemC-45FileC-45Error-u--show_Show_FileError e-5))) "\xa;") ext-0))) (vector 0 arg-1)))))))))) (else (let ((e-5 (vector-ref act-4 1))) (let ((act-5 (PreludeC-45IO-prim__putStr (string-append (string-append (string-append arg-1 "/output") (string-append ": " (SystemC-45FileC-45Error-u--show_Show_FileError e-5))) "\xa;") ext-0))) (vector 0 arg-1)))))))))))))
(define TestC-45Golden-testThread (lambda (arg-0 arg-1 arg-2 ext-0) (let ((act-1 ((SystemC-45Concurrency-channelGet csegen-43 arg-1) ext-0))) (if (null? act-1) ((SystemC-45Concurrency-channelPut csegen-43 arg-2 '()) ext-0) (let ((e-0 (unbox act-1))) (let ((act-2 (TestC-45Golden-runTest arg-0 e-0 ext-0))) (let ((act-3 ((SystemC-45Concurrency-channelPut csegen-43 arg-2 (box act-2)) ext-0))) (TestC-45Golden-testThread arg-0 arg-1 arg-2 ext-0))))))))
(define TestC-45Golden-u--show_Show_CGRequirement (lambda (arg-0) (cond ((equal? arg-0 0) "refc") ((equal? arg-0 1) "chez") ((equal? arg-0 2) "node") ((equal? arg-0 3) "racket") (else "gambit"))))
(define TestC-45Golden-n--8900-5027-u--separator (lambda (arg-0 arg-1) (PreludeC-45Types-fastPack (DataC-45List-replicateTR '() 72 #\-))))
(define TestC-45Golden-n--8900-5026-u--banner (lambda (arg-0 arg-1 arg-2) (DataC-45String-fastUnlines (PreludeC-45TypesC-45List-tailRecAppend (cons "" (cons (TestC-45Golden-n--8900-5027-u--separator arg-0 arg-1) (cons (let ((e-0 (vector-ref arg-0 0))) e-0) '()))) (PreludeC-45TypesC-45List-tailRecAppend arg-2 (cons (TestC-45Golden-n--8900-5027-u--separator arg-0 arg-1) '()))))))
(define TestC-45Golden-case--caseC-32blockC-32inC-32poolRunner-5181 (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 arg-6 ext-0) (let ((e-2 (car arg-6))) (let ((e-3 (cdr arg-6))) (let ((act-1 (PreludeC-45IO-prim__putStr (string-append (TestC-45Golden-n--8900-5026-u--banner arg-0 arg-1 e-3) "\xa;") ext-0))) (((let ((sc1 (PreludeC-45Interfaces-sequence csegen-6 (vector csegen-9 csegen-24 (lambda (u--b) (lambda (u--a) (lambda (u--f) (lambda (i_con-0) (lambda (arg-14093) (lambda (arg-14100) (PreludeC-45Types-u--traverse_Traversable_List i_con-0 arg-14093 arg-14100)))))))) e-2))) (if (null? sc1) (lambda () (lambda (eta-0) TestC-45Golden-initSummary)) (let ((u--opts (let ((e-5 (vector-ref arg-0 2))) (case (vector-ref e-5 0) ((0) (let ((e-14 (vector-ref arg-1 0))) (let ((e-12 (vector-ref arg-1 2))) (let ((e-11 (vector-ref arg-1 3))) (let ((e-10 (vector-ref arg-1 4))) (let ((e-9 (vector-ref arg-1 5))) (let ((e-8 (vector-ref arg-1 6))) (let ((e-7 (vector-ref arg-1 7))) (vector e-14 '() e-12 e-11 e-10 e-9 e-8 e-7))))))))) ((2) (let ((e-7 (vector-ref e-5 1))) (let ((e-15 (vector-ref arg-1 0))) (let ((e-13 (vector-ref arg-1 2))) (let ((e-12 (vector-ref arg-1 3))) (let ((e-11 (vector-ref arg-1 4))) (let ((e-10 (vector-ref arg-1 5))) (let ((e-9 (vector-ref arg-1 6))) (let ((e-8 (vector-ref arg-1 7))) (vector e-15 (box (TestC-45Golden-u--show_Show_CGRequirement e-7)) e-13 e-12 e-11 e-10 e-9 e-8)))))))))) (else arg-1))))) (lambda () (lambda (world-0) (let ((act-2 (csegen-44 world-0))) (let ((act-3 (csegen-44 world-0))) (let ((act-4 (csegen-44 world-0))) (let ((act-5 ((PreludeC-45Interfaces-for_ csegen-36 csegen-24 (DataC-45List-replicateTR '() (let ((e-6 (vector-ref u--opts 6))) e-6) 0) (lambda (_-5284) (lambda (eta-0) (PreludeC-45IO-fork (lambda (eta-1) (TestC-45Golden-testThread u--opts act-4 act-3 eta-1)) eta-0)))) world-0))) (let ((act-6 (PreludeC-45IO-fork (TestC-45Golden-testSender act-4 (let ((e-6 (vector-ref u--opts 6))) e-6) arg-4) world-0))) (let ((act-7 (PreludeC-45IO-fork (TestC-45Golden-testReceiver act-3 TestC-45Golden-initSummary act-2 (let ((e-6 (vector-ref u--opts 6))) e-6)) world-0))) (let ((act-8 ((SystemC-45Concurrency-channelGet csegen-43 act-2) world-0))) act-8))))))))))))) ext-0))))))
(define TestC-45Golden-poolRunner (lambda (arg-0 arg-1) (let ((u--tests ((TestC-45Golden-filterTests arg-0) (let ((e-3 (vector-ref arg-1 3))) e-3)))) (lambda (clam-0) (if (null? u--tests) TestC-45Golden-initSummary (let ((e-1 (car u--tests))) (let ((e-2 (cdr u--tests))) (let ((act-1 ((PreludeC-45Basics-flip (lambda (clam-1) (lambda (clam-2) (PreludeC-45Types-u--traverse_Traversable_List csegen-36 clam-1 clam-2))) (PreludeC-45TypesC-45List-tailRecAppend (TestC-45Golden-toList (let ((e-4 (vector-ref arg-1 2))) e-4)) (let ((e-5 (vector-ref arg-1 1))) e-5)) (lambda (u--req) (lambda (world-0) (let ((act-1 ((TestC-45Golden-checkRequirement u--req) world-0))) (let ((u--msg (if (null? act-1) (string-append "\x2717; " (string-append (TestC-45Golden-u--show_Show_Requirement u--req) " not found")) (let ((e-3 (unbox act-1))) (string-append "\x2713; Found " (string-append (TestC-45Golden-u--show_Show_Requirement u--req) (string-append " at " e-3))))))) (cons act-1 u--msg)))))) clam-0))) (let ((tests-0 (cons e-1 e-2))) (TestC-45Golden-case--caseC-32blockC-32inC-32poolRunner-5181 arg-1 arg-0 e-2 e-1 tests-0 act-1 (DataC-45List-u--unzip_Zippable_List act-1) clam-0))))))))))
(define TestC-45Golden-u--C-60C-43C-62_Semigroup_Summary (lambda (arg-0 arg-1) (let ((e-0 (car arg-0))) (let ((e-1 (cdr arg-0))) (let ((e-2 (car arg-1))) (let ((e-3 (cdr arg-1))) (cons (PreludeC-45TypesC-45List-tailRecAppend e-0 e-2) (PreludeC-45TypesC-45List-tailRecAppend e-1 e-3))))))))
(define PreludeC-45Types-u--C-62_Ord_Nat (lambda (arg-0 arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Ordering (PreludeC-45EqOrd-u--compare_Ord_Integer arg-0 arg-1) 2)))
(define TestC-45Golden-u--neutral_Monoid_Summary TestC-45Golden-initSummary)
(define PreludeC-45Show-u--show_Show_Nat (lambda (arg-0) (PreludeC-45Show-u--show_Show_Integer arg-0)))
(define TestC-45Golden-runnerWith (lambda (arg-0 arg-1 ext-0) (let ((act-1 (let ((e-1 (vector-ref arg-0 1))) (if (null? e-1) (let ((act-1 (TestC-45Golden-findCG ext-0))) (let ((e-15 (vector-ref arg-0 0))) (let ((e-13 (vector-ref arg-0 2))) (let ((e-12 (vector-ref arg-0 3))) (let ((e-11 (vector-ref arg-0 4))) (let ((e-10 (vector-ref arg-0 5))) (let ((e-9 (vector-ref arg-0 6))) (let ((e-8 (vector-ref arg-0 7))) (vector e-15 act-1 e-13 e-12 e-11 e-10 e-9 e-8))))))))) arg-0)))) (let ((act-2 (PreludeC-45IO-u--map_Functor_IO (lambda (eta-0) (PreludeC-45Types-u--foldMap_Foldable_List (cons (lambda (arg-8474) (lambda (arg-8477) (TestC-45Golden-u--C-60C-43C-62_Semigroup_Summary arg-8474 arg-8477))) TestC-45Golden-u--neutral_Monoid_Summary) (lambda (eta-1) eta-1) eta-0)) (PreludeC-45Types-u--traverse_Traversable_List csegen-36 (lambda (eta-0) (TestC-45Golden-poolRunner act-1 eta-0)) arg-1) ext-0))) (let ((u--nsucc (PreludeC-45TypesC-45List-lengthTR (let ((e-0 (car act-2))) e-0)))) (let ((u--nfail (PreludeC-45TypesC-45List-lengthTR (let ((e-1 (cdr act-2))) e-1)))) (let ((u--ntotal (+ u--nsucc u--nfail))) (let ((act-3 (PreludeC-45IO-prim__putStr (string-append (string-append (PreludeC-45Show-u--show_Show_Nat u--nsucc) (string-append "/" (string-append (PreludeC-45Show-u--show_Show_Nat u--ntotal) " tests successful"))) "\xa;") ext-0))) (((let ((u--list (DataC-45String-fastUnlines (let ((e-1 (cdr act-2))) e-1)))) (lambda () (lambda (world-0) (let ((act-4 ((PreludeC-45Interfaces-when csegen-36 (PreludeC-45Types-u--C-62_Ord_Nat u--nfail 0) (lambda () (lambda (world-1) (let ((act-4 (PreludeC-45IO-prim__putStr "Failing tests:\xa;" world-1))) (PreludeC-45IO-prim__putStr u--list world-1))))) world-0))) (let ((act-5 (let ((e-7 (vector-ref act-1 7))) (if (null? e-7) (vector 0 ) (let ((e-8 (unbox e-7))) (let ((act-5 ((SystemC-45FileC-45ReadWrite-writeFile csegen-43 e-8 u--list) world-0))) (case (vector-ref act-5 0) ((1) (vector 0 )) (else (let ((e-9 (vector-ref act-5 1))) ((System-die csegen-43 (SystemC-45FileC-45Error-u--show_Show_FileError e-9)) world-0)))))))))) (((let ((sc0 (or (and (= u--nfail 0) 1) 0))) (cond ((equal? sc0 1) (lambda () (System-exitSuccess csegen-43))) (else (lambda () (System-exitFailure csegen-43)))))) world-0))))))) ext-0)))))))))
(define DataC-45String-joinBy (lambda (arg-0 arg-1) (PreludeC-45Types-u--foldMap_Foldable_List csegen-57 (lambda (eta-0) eta-0) (DataC-45List-intersperse arg-0 arg-1))))
(define DataC-45String-unwords (lambda (ext-0) (DataC-45String-joinBy " " ext-0)))
(define TestC-45Golden-usage (DataC-45String-unwords (cons "Usage:" (cons "runtests <path>" (cons "[--timing]" (cons "[--interactive]" (cons "[--[no-]color, --[no-]colour]" (cons "[--cg CODEGEN]" (cons "[--threads N]" (cons "[--failure-file PATH]" (cons "[--only-file PATH]" (cons "[[--only|--except] [NAMES]]" '()))))))))))))
(define PreludeC-45Types-getAt (lambda (arg-1 arg-2) (cond ((equal? arg-1 0) (if (null? arg-2) '() (let ((e-3 (car arg-2))) (box e-3))))(else (let ((e-1 (- arg-1 1))) (if (null? arg-2) '() (let ((e-7 (cdr arg-2))) (PreludeC-45Types-getAt e-1 e-7))))))))
(define PreludeC-45Types-isDigit (lambda (arg-0) (let ((sc0 (PreludeC-45EqOrd-u--C-62C-61_Ord_Char arg-0 #\0))) (cond ((equal? sc0 1) (PreludeC-45EqOrd-u--C-60C-61_Ord_Char arg-0 #\9)) (else 0)))))
(define PreludeC-45Show-protectEsc (lambda (arg-0 arg-1 arg-2) (string-append arg-1 (string-append (let ((sc0 (PreludeC-45Show-firstCharIs arg-0 arg-2))) (cond ((equal? sc0 1) "\\&") (else ""))) arg-2))))
(define PreludeC-45EqOrd-u--C-62_Ord_Char (lambda (arg-0 arg-1) (let ((sc0 (or (and (char>? arg-0 arg-1) 1) 0))) (cond ((equal? sc0 0) 0)(else 1)))))
(define PreludeC-45Show-u--showPrec_Show_Int (lambda (ext-0 ext-1) (PreludeC-45Show-primNumShow (lambda (eta-0) (number->string eta-0)) ext-0 ext-1)))
(define PreludeC-45Show-u--show_Show_Int (lambda (arg-0) (PreludeC-45Show-u--showPrec_Show_Int (vector 0 ) arg-0)))
(define PreludeC-45Show-n--2439-11931-u--asciiTab (lambda (arg-0) (cons "NUL" (cons "SOH" (cons "STX" (cons "ETX" (cons "EOT" (cons "ENQ" (cons "ACK" (cons "BEL" (cons "BS" (cons "HT" (cons "LF" (cons "VT" (cons "FF" (cons "CR" (cons "SO" (cons "SI" (cons "DLE" (cons "DC1" (cons "DC2" (cons "DC3" (cons "DC4" (cons "NAK" (cons "SYN" (cons "ETB" (cons "CAN" (cons "EM" (cons "SUB" (cons "ESC" (cons "FS" (cons "GS" (cons "RS" (cons "US" '()))))))))))))))))))))))))))))))))))
(define PreludeC-45Show-showLitChar (lambda (arg-0) (cond ((equal? arg-0 (integer->char 7)) (lambda (arg-1) (string-append "\\a" arg-1))) ((equal? arg-0 (integer->char 8)) (lambda (arg-1) (string-append "\\b" arg-1))) ((equal? arg-0 (integer->char 12)) (lambda (arg-1) (string-append "\\f" arg-1))) ((equal? arg-0 (integer->char 10)) (lambda (arg-1) (string-append "\\n" arg-1))) ((equal? arg-0 (integer->char 13)) (lambda (arg-1) (string-append "\\r" arg-1))) ((equal? arg-0 (integer->char 9)) (lambda (arg-1) (string-append "\\t" arg-1))) ((equal? arg-0 (integer->char 11)) (lambda (arg-1) (string-append "\\v" arg-1))) ((equal? arg-0 (integer->char 14)) (lambda (eta-0) (PreludeC-45Show-protectEsc (lambda (arg-1) (PreludeC-45EqOrd-u--C-61C-61_Eq_Char arg-1 #\H)) "\\SO" eta-0))) ((equal? arg-0 (integer->char 127)) (lambda (arg-1) (string-append "\\DEL" arg-1))) ((equal? arg-0 #\\) (lambda (arg-1) (string-append "\\\\" arg-1)))(else (lambda (clam-0) (let ((sc0 (PreludeC-45Types-getAt (PreludeC-45Types-prim__integerToNat (char->integer arg-0)) (PreludeC-45Show-n--2439-11931-u--asciiTab arg-0)))) (if (null? sc0) (let ((sc1 (PreludeC-45EqOrd-u--C-62_Ord_Char arg-0 (integer->char 127)))) (cond ((equal? sc1 1) (string-cons #\\ (PreludeC-45Show-protectEsc (lambda (eta-0) (PreludeC-45Types-isDigit eta-0)) (PreludeC-45Show-u--show_Show_Int (cast-char-boundedInt arg-0 63)) clam-0))) (else (string-cons arg-0 clam-0)))) (let ((e-1 (unbox sc0))) (string-cons #\\ (string-append e-1 clam-0))))))))))
(define PreludeC-45Show-showLitString (lambda (arg-0) (lambda (clam-0) (if (null? arg-0) clam-0 (let ((e-2 (car arg-0))) (let ((e-3 (cdr arg-0))) (cond ((equal? e-2 #\") (string-append "\\\"" ((PreludeC-45Show-showLitString e-3) clam-0)))(else ((PreludeC-45Show-showLitChar e-2) ((PreludeC-45Show-showLitString e-3) clam-0))))))))))
(define PreludeC-45Show-u--show_Show_String (lambda (arg-0) (string-cons #\" ((PreludeC-45Show-showLitString (PreludeC-45Types-fastUnpack arg-0)) "\""))))
(define PreludeC-45Show-u--showPrec_Show_String (lambda (arg-0 arg-1) (PreludeC-45Show-u--show_Show_String arg-1)))
(define PreludeC-45Show-n--3221-12652-u--showC-39 (lambda (arg-1 arg-2 arg-3 arg-4) (if (null? arg-4) arg-3 (let ((e-2 (car arg-4))) (let ((e-3 (cdr arg-4))) (if (null? e-3) (string-append arg-3 (let ((e-1 (car arg-1))) (e-1 e-2))) (PreludeC-45Show-n--3221-12652-u--showC-39 arg-1 arg-2 (string-append arg-3 (string-append (let ((e-1 (car arg-1))) (e-1 e-2)) ", ")) e-3)))))))
(define PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (lambda (arg-1 arg-2) (string-append "[" (string-append (PreludeC-45Show-n--3221-12652-u--showC-39 arg-1 arg-2 "" arg-2) "]"))))
(define TestC-45Golden-runner (lambda (arg-0 ext-0) (let ((act-1 ((System-getArgs csegen-43) ext-0))) (let ((act-2 ((TestC-45Golden-options act-1) ext-0))) (if (null? act-2) (let ((act-3 (PreludeC-45IO-prim__putStr (string-append (PreludeC-45Show-u--show_Show_C-40ListC-32C-36aC-41 (cons (lambda (u--x) (PreludeC-45Show-u--show_Show_String u--x)) (lambda (u--d) (lambda (u--x) (PreludeC-45Show-u--showPrec_Show_String u--d u--x)))) act-1) "\xa;") ext-0))) (PreludeC-45IO-prim__putStr (string-append TestC-45Golden-usage "\xa;") ext-0)) (let ((e-1 (unbox act-2))) (TestC-45Golden-runnerWith e-1 arg-0 ext-0)))))))
(define SystemC-45Directory-closeDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Directory-prim__closeDir arg-2 eta-0))))))
(define SystemC-45Errno-getErrno (lambda (arg-1) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (lambda (eta-0) (SystemC-45Errno-prim__getErrno eta-0))))))
(define SystemC-45Directory-nextDirEntry (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__dirEntry arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (let ((e-7 (car arg-1))) (let ((e-9 (vector-ref e-7 1))) ((((e-9 'erased) 'erased) (SystemC-45Errno-getErrno arg-1)) (lambda (bind-0) (let ((sc3 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int bind-0 (blodwen-toSignedInt 0 63)))) (cond ((equal? sc3 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (let ((e-12 (car arg-1))) (let ((e-15 (vector-ref e-12 0))) (let ((e-17 (vector-ref e-15 1))) ((e-17 'erased) (vector 1 '()))))))))))))) (else (let ((u--n (PreludeC-45IO-prim__getString u--res))) (let ((sc2 (let ((sc3 (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "."))) (cond ((equal? sc3 1) 1) (else (PreludeC-45EqOrd-u--C-61C-61_Eq_String u--n "..")))))) (cond ((equal? sc2 1) (SystemC-45Directory-nextDirEntry arg-1 arg-2)) (else (let ((e-7 (car arg-1))) (let ((e-10 (vector-ref e-7 0))) (let ((e-12 (vector-ref e-10 1))) ((e-12 'erased) (vector 1 (box u--n)))))))))))))))))))
(define SystemC-45Directory-n--3611-1655-u--C-62C-62C-61 (lambda (arg-1 arg-2 ext-0 ext-1) (PreludeC-45InterfacesC-45Monad-u--C-62C-62C-61_Monad_ComposeC-40C-40C-46C-32C-36mC-41C-32C-36tC-41 csegen-42 (vector (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-2 (vector-ref arg-8885 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8885 1))) (vector 1 (u--func e-5))))))))) (lambda (u--a) (lambda (arg-9931) (vector 1 arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (case (vector-ref arg-9937 0) ((0) (let ((e-2 (vector-ref arg-9937 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-9937 1))) (case (vector-ref arg-9944 0) ((1) (let ((e-8 (vector-ref arg-9944 1))) (vector 1 (e-5 e-8)))) (else (let ((e-11 (vector-ref arg-9944 1))) (vector 0 e-11)))))))))))) csegen-157 csegen-158) (vector (lambda (u--b) (lambda (u--a) (lambda (u--func) (lambda (arg-8885) (case (vector-ref arg-8885 0) ((0) (let ((e-2 (vector-ref arg-8885 1))) (vector 0 e-2))) (else (let ((e-5 (vector-ref arg-8885 1))) (vector 1 (u--func e-5))))))))) csegen-174 csegen-178) ext-0 ext-1)))
(define SystemC-45Directory-collectDir (lambda (arg-1 arg-2) (let ((e-2 (cdr arg-1))) ((e-2 'erased) (SystemC-45Directory-n--3611-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-nextDirEntry csegen-43 arg-2) (lambda (_-0) (if (null? _-0) (lambda (eta-0) (vector 1 '())) (let ((e-3 (unbox _-0))) (SystemC-45Directory-n--3611-1655-u--C-62C-62C-61 arg-1 arg-2 (SystemC-45Directory-collectDir csegen-43 arg-2) (lambda (u--ns) (lambda (eta-0) (vector 1 (cons e-3 u--ns)))))))))))))
(define SystemC-45Directory-ok (lambda (arg-2 arg-3) (let ((e-1 (car arg-2))) (let ((e-5 (vector-ref e-1 0))) (let ((e-7 (vector-ref e-5 1))) ((e-7 'erased) (vector 1 arg-3)))))))
(define SystemC-45Directory-openDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (let ((e-6 (cdr arg-1))) ((e-6 'erased) (lambda (eta-0) (SystemC-45Directory-prim__openDir arg-2 eta-0))))) (lambda (u--res) (let ((sc1 (PreludeC-45EqOrd-u--C-47C-61_Eq_Int (PrimIO-prim__nullAnyPtr u--res) (blodwen-toSignedInt 0 63)))) (cond ((equal? sc1 1) (SystemC-45FileC-45Error-returnError arg-1)) (else (SystemC-45Directory-ok arg-1 u--res))))))))))
(define SystemC-45Directory-listDir (lambda (arg-1 arg-2) (let ((e-1 (car arg-1))) (let ((e-4 (vector-ref e-1 1))) ((((e-4 'erased) 'erased) (SystemC-45Directory-openDir arg-1 arg-2)) (lambda (_-0) (case (vector-ref _-0 0) ((1) (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-10 (vector-ref e-8 1))) ((((e-10 'erased) 'erased) (SystemC-45Directory-collectDir arg-1 e-6)) (lambda (u--ns) (let ((e-13 (car arg-1))) (let ((e-15 (vector-ref e-13 1))) ((((e-15 'erased) 'erased) (SystemC-45Directory-closeDir arg-1 e-6)) (lambda (u--ignore) (let ((e-18 (car arg-1))) (let ((e-21 (vector-ref e-18 0))) (let ((e-23 (vector-ref e-21 1))) ((e-23 'erased) u--ns)))))))))))))) (else (let ((e-6 (vector-ref _-0 1))) (let ((e-8 (car arg-1))) (let ((e-11 (vector-ref e-8 0))) (let ((e-13 (vector-ref e-11 1))) ((e-13 'erased) (vector 0 e-6))))))))))))))
(define PreludeC-45Types-u--C-60C-42C-62_Applicative_List (lambda (arg-2 arg-3) (PreludeC-45Types-listBind arg-2 (lambda (u--f) (PreludeC-45TypesC-45List-mapAppend '() u--f arg-3)))))
(define TestC-45Golden-n--8181-4400-u--isTest (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5) (SystemC-45FileC-45Meta-exists csegen-43 (string-append arg-5 "/run"))))
(define TestC-45Golden-n--8181-4399-u--filter (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 arg-5 ext-0) (if (null? arg-5) '() (let ((e-2 (car arg-5))) (let ((e-3 (cdr arg-5))) (let ((act-1 (TestC-45Golden-n--8181-4399-u--filter arg-0 arg-1 arg-2 arg-3 arg-4 e-3 ext-0))) (let ((act-2 ((TestC-45Golden-n--8181-4400-u--isTest arg-0 arg-1 arg-2 arg-3 arg-4 e-2) ext-0))) (cond ((equal? act-2 1) (cons e-2 act-1)) (else act-1)))))))))
(define TestC-45Golden-testsInDir (lambda (arg-0 arg-1 arg-2 arg-3 arg-4 ext-0) (let ((act-1 ((SystemC-45Directory-listDir csegen-43 arg-0) ext-0))) (case (vector-ref act-1 0) ((1) (let ((e-2 (vector-ref act-1 1))) (let ((u--names (PreludeC-45Types-listBind e-2 (lambda (u--n) (PreludeC-45Types-listBind (PreludeC-45Interfaces-guard (vector (vector csegen-9 (lambda (u--a) (lambda (arg-9931) (PreludeC-45Types-u--pure_Applicative_List arg-9931))) (lambda (u--b) (lambda (u--a) (lambda (arg-9937) (lambda (arg-9944) (PreludeC-45Types-u--C-60C-42C-62_Applicative_List arg-9937 arg-9944)))))) (lambda (u--a) '()) (lambda (u--a) (lambda (arg-10313) (lambda (arg-10316) (PreludeC-45TypesC-45List-tailRecAppend arg-10313 (arg-10316)))))) (arg-1 u--n)) (lambda (_-10649) (PreludeC-45Types-u--pure_Applicative_List u--n))))))) (let ((u--testNames (PreludeC-45Types-listBind u--names (lambda (u--n) (PreludeC-45Types-u--pure_Applicative_List (string-append arg-0 (string-append "/" u--n))))))) (let ((act-2 (TestC-45Golden-n--8181-4399-u--filter arg-1 arg-3 arg-4 arg-2 arg-0 u--testNames ext-0))) (let ((act-3 ((PreludeC-45Interfaces-when csegen-36 (or (and (= (PreludeC-45TypesC-45List-lengthTR act-2) 0) 1) 0) (lambda () (System-die csegen-43 (string-append "no tests found in " arg-0)))) ext-0))) (vector arg-2 arg-3 arg-4 act-2))))))) (else (let ((e-5 (vector-ref act-1 1))) ((System-die csegen-43 (string-append "failed to list " (string-append arg-0 (string-append ": " (SystemC-45FileC-45Error-u--show_Show_FileError e-5))))) ext-0)))))))
(define Main-main (lambda (ext-0) (let ((act-1 (TestC-45Golden-testsInDir "start-stop" (lambda (eta-0) 1) "Starting & Ending Games" '() (vector 0 ) ext-0))) (let ((act-2 (TestC-45Golden-testsInDir "game-good" (lambda (eta-0) 1) "Playing games well" '() (vector 0 ) ext-0))) (let ((act-3 (TestC-45Golden-testsInDir "game-bad" (lambda (eta-0) 1) "Playing games badly" '() (vector 0 ) ext-0))) (TestC-45Golden-runner (cons act-1 (cons act-2 (cons act-3 '()))) ext-0))))))
(define PreludeC-45EqOrd-compareInteger (lambda (ext-0 ext-1) (PreludeC-45EqOrd-u--compare_Ord_Integer ext-0 ext-1)))
(collect-request-handler (lambda () (collect) (blodwen-run-finalisers)))
(PrimIO-unsafePerformIO (lambda (eta-0) (Main-main eta-0)))
  (collect 4)
  (blodwen-run-finalisers)
  
  )